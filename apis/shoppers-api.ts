/* tslint:disable */
/* eslint-disable */
/**
 * pantryplus-api
 * This is the API layer for the PantryPlus mobile app
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Item } from '../models';
import { List } from '../models';
import { Location } from '../models';
import { PickGroupIdOrNameOrOwner_ } from '../models';
import { PickShopperId_ } from '../models';
import { Shopper } from '../models';
/**
 * ShoppersApi - axios parameter creator
 * @export
 */
export const ShoppersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Creates a new shopper
         * @param {Shopper} body the shopper to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShopper: async (body: Shopper, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createShopper.');
            }
            const localVarPath = `/shoppers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves all of the groups associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom groups will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups: async (xAuthUser: string, shopperId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAuthUser' is not null or undefined
            if (xAuthUser === null || xAuthUser === undefined) {
                throw new RequiredError('xAuthUser','Required parameter xAuthUser was null or undefined when calling getGroups.');
            }
            // verify required parameter 'shopperId' is not null or undefined
            if (shopperId === null || shopperId === undefined) {
                throw new RequiredError('shopperId','Required parameter shopperId was null or undefined when calling getGroups.');
            }
            const localVarPath = `/shoppers/{shopperId}/groups`
                .replace(`{${"shopperId"}}`, encodeURIComponent(String(shopperId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthUser !== undefined && xAuthUser !== null) {
                localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves all previously purchased items associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom items will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: async (xAuthUser: string, shopperId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAuthUser' is not null or undefined
            if (xAuthUser === null || xAuthUser === undefined) {
                throw new RequiredError('xAuthUser','Required parameter xAuthUser was null or undefined when calling getItems.');
            }
            // verify required parameter 'shopperId' is not null or undefined
            if (shopperId === null || shopperId === undefined) {
                throw new RequiredError('shopperId','Required parameter shopperId was null or undefined when calling getItems.');
            }
            const localVarPath = `/shoppers/{shopperId}/items`
                .replace(`{${"shopperId"}}`, encodeURIComponent(String(shopperId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthUser !== undefined && xAuthUser !== null) {
                localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves all lists associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom lists will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLists: async (xAuthUser: string, shopperId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAuthUser' is not null or undefined
            if (xAuthUser === null || xAuthUser === undefined) {
                throw new RequiredError('xAuthUser','Required parameter xAuthUser was null or undefined when calling getLists.');
            }
            // verify required parameter 'shopperId' is not null or undefined
            if (shopperId === null || shopperId === undefined) {
                throw new RequiredError('shopperId','Required parameter shopperId was null or undefined when calling getLists.');
            }
            const localVarPath = `/shoppers/{shopperId}/lists`
                .replace(`{${"shopperId"}}`, encodeURIComponent(String(shopperId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthUser !== undefined && xAuthUser !== null) {
                localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves all locations associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom locations will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocations: async (xAuthUser: string, shopperId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAuthUser' is not null or undefined
            if (xAuthUser === null || xAuthUser === undefined) {
                throw new RequiredError('xAuthUser','Required parameter xAuthUser was null or undefined when calling getLocations.');
            }
            // verify required parameter 'shopperId' is not null or undefined
            if (shopperId === null || shopperId === undefined) {
                throw new RequiredError('shopperId','Required parameter shopperId was null or undefined when calling getLocations.');
            }
            const localVarPath = `/shoppers/{shopperId}/locations`
                .replace(`{${"shopperId"}}`, encodeURIComponent(String(shopperId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthUser !== undefined && xAuthUser !== null) {
                localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves a shopper by ID
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId The ID of the shopper to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveShopper: async (xAuthUser: string, shopperId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAuthUser' is not null or undefined
            if (xAuthUser === null || xAuthUser === undefined) {
                throw new RequiredError('xAuthUser','Required parameter xAuthUser was null or undefined when calling retrieveShopper.');
            }
            // verify required parameter 'shopperId' is not null or undefined
            if (shopperId === null || shopperId === undefined) {
                throw new RequiredError('shopperId','Required parameter shopperId was null or undefined when calling retrieveShopper.');
            }
            const localVarPath = `/shoppers/{shopperId}`
                .replace(`{${"shopperId"}}`, encodeURIComponent(String(shopperId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthUser !== undefined && xAuthUser !== null) {
                localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Updates an existing shopper
         * @param {Shopper} body the updated shopper properties
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShopper: async (body: Shopper, xAuthUser: string, shopperId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateShopper.');
            }
            // verify required parameter 'xAuthUser' is not null or undefined
            if (xAuthUser === null || xAuthUser === undefined) {
                throw new RequiredError('xAuthUser','Required parameter xAuthUser was null or undefined when calling updateShopper.');
            }
            // verify required parameter 'shopperId' is not null or undefined
            if (shopperId === null || shopperId === undefined) {
                throw new RequiredError('shopperId','Required parameter shopperId was null or undefined when calling updateShopper.');
            }
            const localVarPath = `/shoppers/{shopperId}`
                .replace(`{${"shopperId"}}`, encodeURIComponent(String(shopperId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthUser !== undefined && xAuthUser !== null) {
                localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShoppersApi - functional programming interface
 * @export
 */
export const ShoppersApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Creates a new shopper
         * @param {Shopper} body the shopper to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShopper(body: Shopper, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Shopper>>> {
            const localVarAxiosArgs = await ShoppersApiAxiosParamCreator(configuration).createShopper(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Retrieves all of the groups associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom groups will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroups(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PickGroupIdOrNameOrOwner_>>>> {
            const localVarAxiosArgs = await ShoppersApiAxiosParamCreator(configuration).getGroups(xAuthUser, shopperId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Retrieves all previously purchased items associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom items will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItems(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Item>>>> {
            const localVarAxiosArgs = await ShoppersApiAxiosParamCreator(configuration).getItems(xAuthUser, shopperId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Retrieves all lists associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom lists will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLists(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<List>>>> {
            const localVarAxiosArgs = await ShoppersApiAxiosParamCreator(configuration).getLists(xAuthUser, shopperId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Retrieves all locations associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom locations will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocations(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Location>>>> {
            const localVarAxiosArgs = await ShoppersApiAxiosParamCreator(configuration).getLocations(xAuthUser, shopperId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Retrieves a shopper by ID
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId The ID of the shopper to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveShopper(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Shopper>>> {
            const localVarAxiosArgs = await ShoppersApiAxiosParamCreator(configuration).retrieveShopper(xAuthUser, shopperId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Updates an existing shopper
         * @param {Shopper} body the updated shopper properties
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShopper(body: Shopper, xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PickShopperId_>>> {
            const localVarAxiosArgs = await ShoppersApiAxiosParamCreator(configuration).updateShopper(body, xAuthUser, shopperId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ShoppersApi - factory interface
 * @export
 */
export const ShoppersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Creates a new shopper
         * @param {Shopper} body the shopper to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShopper(body: Shopper, options?: AxiosRequestConfig): Promise<AxiosResponse<Shopper>> {
            return ShoppersApiFp(configuration).createShopper(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves all of the groups associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom groups will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroups(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PickGroupIdOrNameOrOwner_>>> {
            return ShoppersApiFp(configuration).getGroups(xAuthUser, shopperId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves all previously purchased items associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom items will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItems(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Item>>> {
            return ShoppersApiFp(configuration).getItems(xAuthUser, shopperId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves all lists associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom lists will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLists(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<List>>> {
            return ShoppersApiFp(configuration).getLists(xAuthUser, shopperId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves all locations associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom locations will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocations(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Location>>> {
            return ShoppersApiFp(configuration).getLocations(xAuthUser, shopperId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a shopper by ID
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId The ID of the shopper to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveShopper(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Shopper>> {
            return ShoppersApiFp(configuration).retrieveShopper(xAuthUser, shopperId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates an existing shopper
         * @param {Shopper} body the updated shopper properties
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShopper(body: Shopper, xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PickShopperId_>> {
            return ShoppersApiFp(configuration).updateShopper(body, xAuthUser, shopperId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShoppersApi - object-oriented interface
 * @export
 * @class ShoppersApi
 * @extends {BaseAPI}
 */
export class ShoppersApi extends BaseAPI {
    /**
     *
     * @summary Creates a new shopper
     * @param {Shopper} body the shopper to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    public async createShopper(body: Shopper, options?: AxiosRequestConfig) : Promise<AxiosResponse<Shopper>> {
        return ShoppersApiFp(this.configuration).createShopper(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves all of the groups associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom groups will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    public async getGroups(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PickGroupIdOrNameOrOwner_>>> {
        return ShoppersApiFp(this.configuration).getGroups(xAuthUser, shopperId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves all previously purchased items associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom items will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    public async getItems(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Item>>> {
        return ShoppersApiFp(this.configuration).getItems(xAuthUser, shopperId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves all lists associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom lists will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    public async getLists(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<List>>> {
        return ShoppersApiFp(this.configuration).getLists(xAuthUser, shopperId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves all locations associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom locations will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    public async getLocations(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Location>>> {
        return ShoppersApiFp(this.configuration).getLocations(xAuthUser, shopperId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a shopper by ID
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId The ID of the shopper to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    public async retrieveShopper(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Shopper>> {
        return ShoppersApiFp(this.configuration).retrieveShopper(xAuthUser, shopperId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates an existing shopper
     * @param {Shopper} body the updated shopper properties
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    public async updateShopper(body: Shopper, xAuthUser: string, shopperId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<PickShopperId_>> {
        return ShoppersApiFp(this.configuration).updateShopper(body, xAuthUser, shopperId, options).then((request) => request(this.axios, this.basePath));
    }
}
