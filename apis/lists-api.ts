/* tslint:disable */
/* eslint-disable */
/**
 * pantryplus-api
 * This is the API layer for the PantryPlus mobile app
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Category } from '../models';
import { Item } from '../models';
import { ItemIdPurchaseBody } from '../models';
import { List } from '../models';
import { PickListNameOrGroupIdOrOrdinal_ } from '../models';
/**
 * ListsApi - axios parameter creator
 * @export
 */
export const ListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Associates an item with a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to associate with the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItem: async (xAuthUser: string, listId: string, itemId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAuthUser' is not null or undefined
            if (xAuthUser === null || xAuthUser === undefined) {
                throw new RequiredError('xAuthUser','Required parameter xAuthUser was null or undefined when calling addItem.');
            }
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId','Required parameter listId was null or undefined when calling addItem.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling addItem.');
            }
            const localVarPath = `/lists/{listId}/items/{itemId}`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthUser !== undefined && xAuthUser !== null) {
                localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds a category to a list
         * @param {Category} body the category to add
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the user&#x27;s nearest store location
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: async (body: Category, xAuthUser: string, xAuthLocation: string, listId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createCategory.');
            }
            // verify required parameter 'xAuthUser' is not null or undefined
            if (xAuthUser === null || xAuthUser === undefined) {
                throw new RequiredError('xAuthUser','Required parameter xAuthUser was null or undefined when calling createCategory.');
            }
            // verify required parameter 'xAuthLocation' is not null or undefined
            if (xAuthLocation === null || xAuthLocation === undefined) {
                throw new RequiredError('xAuthLocation','Required parameter xAuthLocation was null or undefined when calling createCategory.');
            }
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId','Required parameter listId was null or undefined when calling createCategory.');
            }
            const localVarPath = `/lists/{listId}/categories`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthUser !== undefined && xAuthUser !== null) {
                localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
            }

            if (xAuthLocation !== undefined && xAuthLocation !== null) {
                localVarHeaderParameter['X-Auth-Location'] = String(xAuthLocation);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new list of items
         * @param {List} body the list to create
         * @param {string} xAuthUser the email address of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createList: async (body: List, xAuthUser: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createList.');
            }
            // verify required parameter 'xAuthUser' is not null or undefined
            if (xAuthUser === null || xAuthUser === undefined) {
                throw new RequiredError('xAuthUser','Required parameter xAuthUser was null or undefined when calling createList.');
            }
            const localVarPath = `/lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthUser !== undefined && xAuthUser !== null) {
                localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a list of items
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteList: async (xAuthUser: string, listId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAuthUser' is not null or undefined
            if (xAuthUser === null || xAuthUser === undefined) {
                throw new RequiredError('xAuthUser','Required parameter xAuthUser was null or undefined when calling deleteList.');
            }
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId','Required parameter listId was null or undefined when calling deleteList.');
            }
            const localVarPath = `/lists/{listId}`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthUser !== undefined && xAuthUser !== null) {
                localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the categories for a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (xAuthUser: string, xAuthLocation: string, listId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAuthUser' is not null or undefined
            if (xAuthUser === null || xAuthUser === undefined) {
                throw new RequiredError('xAuthUser','Required parameter xAuthUser was null or undefined when calling getCategories.');
            }
            // verify required parameter 'xAuthLocation' is not null or undefined
            if (xAuthLocation === null || xAuthLocation === undefined) {
                throw new RequiredError('xAuthLocation','Required parameter xAuthLocation was null or undefined when calling getCategories.');
            }
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId','Required parameter listId was null or undefined when calling getCategories.');
            }
            const localVarPath = `/lists/{listId}/categories`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthUser !== undefined && xAuthUser !== null) {
                localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
            }

            if (xAuthLocation !== undefined && xAuthLocation !== null) {
                localVarHeaderParameter['X-Auth-Location'] = String(xAuthLocation);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the uncategorized items for a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: async (xAuthUser: string, listId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAuthUser' is not null or undefined
            if (xAuthUser === null || xAuthUser === undefined) {
                throw new RequiredError('xAuthUser','Required parameter xAuthUser was null or undefined when calling getItems.');
            }
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId','Required parameter listId was null or undefined when calling getItems.');
            }
            const localVarPath = `/lists/{listId}/items`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthUser !== undefined && xAuthUser !== null) {
                localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Purchases an item on a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to purchase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseItem: async (xAuthUser: string, xAuthLocation: string, listId: string, itemId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAuthUser' is not null or undefined
            if (xAuthUser === null || xAuthUser === undefined) {
                throw new RequiredError('xAuthUser','Required parameter xAuthUser was null or undefined when calling purchaseItem.');
            }
            // verify required parameter 'xAuthLocation' is not null or undefined
            if (xAuthLocation === null || xAuthLocation === undefined) {
                throw new RequiredError('xAuthLocation','Required parameter xAuthLocation was null or undefined when calling purchaseItem.');
            }
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId','Required parameter listId was null or undefined when calling purchaseItem.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling purchaseItem.');
            }
            const localVarPath = `/lists/{listId}/items/{itemId}/purchase`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthUser !== undefined && xAuthUser !== null) {
                localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
            }

            if (xAuthLocation !== undefined && xAuthLocation !== null) {
                localVarHeaderParameter['X-Auth-Location'] = String(xAuthLocation);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes a category from a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} categoryId the ID of the category to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCategory: async (xAuthUser: string, listId: string, categoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAuthUser' is not null or undefined
            if (xAuthUser === null || xAuthUser === undefined) {
                throw new RequiredError('xAuthUser','Required parameter xAuthUser was null or undefined when calling removeCategory.');
            }
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId','Required parameter listId was null or undefined when calling removeCategory.');
            }
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling removeCategory.');
            }
            const localVarPath = `/lists/{listId}/categories/{categoryId}`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthUser !== undefined && xAuthUser !== null) {
                localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes an item from a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItem: async (xAuthUser: string, listId: string, itemId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAuthUser' is not null or undefined
            if (xAuthUser === null || xAuthUser === undefined) {
                throw new RequiredError('xAuthUser','Required parameter xAuthUser was null or undefined when calling removeItem.');
            }
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId','Required parameter listId was null or undefined when calling removeItem.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling removeItem.');
            }
            const localVarPath = `/lists/{listId}/items/{itemId}`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthUser !== undefined && xAuthUser !== null) {
                localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes the purchase of an item from purchase history
         * @param {ItemIdPurchaseBody} body an object containing the date of purchase
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpurchaseItem: async (body: ItemIdPurchaseBody, xAuthUser: string, xAuthLocation: string, listId: string, itemId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling unpurchaseItem.');
            }
            // verify required parameter 'xAuthUser' is not null or undefined
            if (xAuthUser === null || xAuthUser === undefined) {
                throw new RequiredError('xAuthUser','Required parameter xAuthUser was null or undefined when calling unpurchaseItem.');
            }
            // verify required parameter 'xAuthLocation' is not null or undefined
            if (xAuthLocation === null || xAuthLocation === undefined) {
                throw new RequiredError('xAuthLocation','Required parameter xAuthLocation was null or undefined when calling unpurchaseItem.');
            }
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId','Required parameter listId was null or undefined when calling unpurchaseItem.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling unpurchaseItem.');
            }
            const localVarPath = `/lists/{listId}/items/{itemId}/purchase`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthUser !== undefined && xAuthUser !== null) {
                localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
            }

            if (xAuthLocation !== undefined && xAuthLocation !== null) {
                localVarHeaderParameter['X-Auth-Location'] = String(xAuthLocation);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a list
         * @param {PickListNameOrGroupIdOrOrdinal_} body 
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateList: async (body: PickListNameOrGroupIdOrOrdinal_, xAuthUser: string, listId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateList.');
            }
            // verify required parameter 'xAuthUser' is not null or undefined
            if (xAuthUser === null || xAuthUser === undefined) {
                throw new RequiredError('xAuthUser','Required parameter xAuthUser was null or undefined when calling updateList.');
            }
            // verify required parameter 'listId' is not null or undefined
            if (listId === null || listId === undefined) {
                throw new RequiredError('listId','Required parameter listId was null or undefined when calling updateList.');
            }
            const localVarPath = `/lists/{listId}`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthUser !== undefined && xAuthUser !== null) {
                localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListsApi - functional programming interface
 * @export
 */
export const ListsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Associates an item with a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to associate with the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addItem(xAuthUser: string, listId: string, itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ListsApiAxiosParamCreator(configuration).addItem(xAuthUser, listId, itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Adds a category to a list
         * @param {Category} body the category to add
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the user&#x27;s nearest store location
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCategory(body: Category, xAuthUser: string, xAuthLocation: string, listId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ListsApiAxiosParamCreator(configuration).createCategory(body, xAuthUser, xAuthLocation, listId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a new list of items
         * @param {List} body the list to create
         * @param {string} xAuthUser the email address of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createList(body: List, xAuthUser: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ListsApiAxiosParamCreator(configuration).createList(body, xAuthUser, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes a list of items
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteList(xAuthUser: string, listId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ListsApiAxiosParamCreator(configuration).deleteList(xAuthUser, listId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves the categories for a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(xAuthUser: string, xAuthLocation: string, listId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Category>>>> {
            const localVarAxiosArgs = await ListsApiAxiosParamCreator(configuration).getCategories(xAuthUser, xAuthLocation, listId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves the uncategorized items for a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItems(xAuthUser: string, listId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Item>>>> {
            const localVarAxiosArgs = await ListsApiAxiosParamCreator(configuration).getItems(xAuthUser, listId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Purchases an item on a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to purchase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseItem(xAuthUser: string, xAuthLocation: string, listId: string, itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ListsApiAxiosParamCreator(configuration).purchaseItem(xAuthUser, xAuthLocation, listId, itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Removes a category from a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} categoryId the ID of the category to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCategory(xAuthUser: string, listId: string, categoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ListsApiAxiosParamCreator(configuration).removeCategory(xAuthUser, listId, categoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Removes an item from a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeItem(xAuthUser: string, listId: string, itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ListsApiAxiosParamCreator(configuration).removeItem(xAuthUser, listId, itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Removes the purchase of an item from purchase history
         * @param {ItemIdPurchaseBody} body an object containing the date of purchase
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unpurchaseItem(body: ItemIdPurchaseBody, xAuthUser: string, xAuthLocation: string, listId: string, itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ListsApiAxiosParamCreator(configuration).unpurchaseItem(body, xAuthUser, xAuthLocation, listId, itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates a list
         * @param {PickListNameOrGroupIdOrOrdinal_} body 
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateList(body: PickListNameOrGroupIdOrOrdinal_, xAuthUser: string, listId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ListsApiAxiosParamCreator(configuration).updateList(body, xAuthUser, listId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ListsApi - factory interface
 * @export
 */
export const ListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Associates an item with a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to associate with the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addItem(xAuthUser: string, listId: string, itemId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ListsApiFp(configuration).addItem(xAuthUser, listId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds a category to a list
         * @param {Category} body the category to add
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the user&#x27;s nearest store location
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCategory(body: Category, xAuthUser: string, xAuthLocation: string, listId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ListsApiFp(configuration).createCategory(body, xAuthUser, xAuthLocation, listId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new list of items
         * @param {List} body the list to create
         * @param {string} xAuthUser the email address of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createList(body: List, xAuthUser: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ListsApiFp(configuration).createList(body, xAuthUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a list of items
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteList(xAuthUser: string, listId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ListsApiFp(configuration).deleteList(xAuthUser, listId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves the categories for a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(xAuthUser: string, xAuthLocation: string, listId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Category>>> {
            return ListsApiFp(configuration).getCategories(xAuthUser, xAuthLocation, listId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves the uncategorized items for a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItems(xAuthUser: string, listId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Item>>> {
            return ListsApiFp(configuration).getItems(xAuthUser, listId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Purchases an item on a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to purchase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseItem(xAuthUser: string, xAuthLocation: string, listId: string, itemId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ListsApiFp(configuration).purchaseItem(xAuthUser, xAuthLocation, listId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes a category from a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} categoryId the ID of the category to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCategory(xAuthUser: string, listId: string, categoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ListsApiFp(configuration).removeCategory(xAuthUser, listId, categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes an item from a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeItem(xAuthUser: string, listId: string, itemId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ListsApiFp(configuration).removeItem(xAuthUser, listId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes the purchase of an item from purchase history
         * @param {ItemIdPurchaseBody} body an object containing the date of purchase
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unpurchaseItem(body: ItemIdPurchaseBody, xAuthUser: string, xAuthLocation: string, listId: string, itemId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ListsApiFp(configuration).unpurchaseItem(body, xAuthUser, xAuthLocation, listId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a list
         * @param {PickListNameOrGroupIdOrOrdinal_} body 
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateList(body: PickListNameOrGroupIdOrOrdinal_, xAuthUser: string, listId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ListsApiFp(configuration).updateList(body, xAuthUser, listId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListsApi - object-oriented interface
 * @export
 * @class ListsApi
 * @extends {BaseAPI}
 */
export class ListsApi extends BaseAPI {
    /**
     * 
     * @summary Associates an item with a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to associate with the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public async addItem(xAuthUser: string, listId: string, itemId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ListsApiFp(this.configuration).addItem(xAuthUser, listId, itemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Adds a category to a list
     * @param {Category} body the category to add
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the user&#x27;s nearest store location
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public async createCategory(body: Category, xAuthUser: string, xAuthLocation: string, listId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ListsApiFp(this.configuration).createCategory(body, xAuthUser, xAuthLocation, listId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Creates a new list of items
     * @param {List} body the list to create
     * @param {string} xAuthUser the email address of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public async createList(body: List, xAuthUser: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ListsApiFp(this.configuration).createList(body, xAuthUser, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Deletes a list of items
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public async deleteList(xAuthUser: string, listId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ListsApiFp(this.configuration).deleteList(xAuthUser, listId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves the categories for a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public async getCategories(xAuthUser: string, xAuthLocation: string, listId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Category>>> {
        return ListsApiFp(this.configuration).getCategories(xAuthUser, xAuthLocation, listId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves the uncategorized items for a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public async getItems(xAuthUser: string, listId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Item>>> {
        return ListsApiFp(this.configuration).getItems(xAuthUser, listId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Purchases an item on a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to purchase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public async purchaseItem(xAuthUser: string, xAuthLocation: string, listId: string, itemId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ListsApiFp(this.configuration).purchaseItem(xAuthUser, xAuthLocation, listId, itemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Removes a category from a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} categoryId the ID of the category to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public async removeCategory(xAuthUser: string, listId: string, categoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ListsApiFp(this.configuration).removeCategory(xAuthUser, listId, categoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Removes an item from a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public async removeItem(xAuthUser: string, listId: string, itemId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ListsApiFp(this.configuration).removeItem(xAuthUser, listId, itemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Removes the purchase of an item from purchase history
     * @param {ItemIdPurchaseBody} body an object containing the date of purchase
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public async unpurchaseItem(body: ItemIdPurchaseBody, xAuthUser: string, xAuthLocation: string, listId: string, itemId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ListsApiFp(this.configuration).unpurchaseItem(body, xAuthUser, xAuthLocation, listId, itemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Updates a list
     * @param {PickListNameOrGroupIdOrOrdinal_} body 
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public async updateList(body: PickListNameOrGroupIdOrOrdinal_, xAuthUser: string, listId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ListsApiFp(this.configuration).updateList(body, xAuthUser, listId, options).then((request) => request(this.axios, this.basePath));
    }
}
