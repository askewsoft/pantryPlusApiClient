/**
 * pantryplus-api
 * This is the API layer for the PantryPlus mobile app
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Item } from '../models';
import { List } from '../models';
import { Location } from '../models';
import { PickGroupIdOrNameOrOwnerId_ } from '../models';
import { PickShopperId_ } from '../models';
import { Shopper } from '../models';
/**
 * ShoppersApi - axios parameter creator
 * @export
 */
export declare const ShoppersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a new shopper
     * @param {Shopper} body the shopper to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShopper: (body: Shopper, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves all of the groups associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom groups will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups: (xAuthUser: string, shopperId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves all previously purchased items associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom items will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItems: (xAuthUser: string, shopperId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves all lists associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom lists will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLists: (xAuthUser: string, shopperId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves all locations associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom locations will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLocations: (xAuthUser: string, shopperId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a shopper by ID
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId The ID of the shopper to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveShopper: (xAuthUser: string, shopperId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing shopper
     * @param {Shopper} body the updated shopper properties
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShopper: (body: Shopper, xAuthUser: string, shopperId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ShoppersApi - functional programming interface
 * @export
 */
export declare const ShoppersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a new shopper
     * @param {Shopper} body the shopper to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShopper(body: Shopper, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Shopper>>>;
    /**
     *
     * @summary Retrieves all of the groups associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom groups will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PickGroupIdOrNameOrOwnerId_>>>>;
    /**
     *
     * @summary Retrieves all previously purchased items associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom items will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItems(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Item>>>>;
    /**
     *
     * @summary Retrieves all lists associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom lists will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLists(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<List>>>>;
    /**
     *
     * @summary Retrieves all locations associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom locations will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLocations(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Location>>>>;
    /**
     *
     * @summary Retrieves a shopper by ID
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId The ID of the shopper to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveShopper(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Shopper>>>;
    /**
     *
     * @summary Updates an existing shopper
     * @param {Shopper} body the updated shopper properties
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShopper(body: Shopper, xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PickShopperId_>>>;
};
/**
 * ShoppersApi - factory interface
 * @export
 */
export declare const ShoppersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Creates a new shopper
     * @param {Shopper} body the shopper to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShopper(body: Shopper, options?: AxiosRequestConfig): Promise<AxiosResponse<Shopper>>;
    /**
     *
     * @summary Retrieves all of the groups associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom groups will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PickGroupIdOrNameOrOwnerId_>>>;
    /**
     *
     * @summary Retrieves all previously purchased items associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom items will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItems(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Item>>>;
    /**
     *
     * @summary Retrieves all lists associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom lists will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLists(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<List>>>;
    /**
     *
     * @summary Retrieves all locations associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom locations will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLocations(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Location>>>;
    /**
     *
     * @summary Retrieves a shopper by ID
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId The ID of the shopper to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveShopper(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Shopper>>;
    /**
     *
     * @summary Updates an existing shopper
     * @param {Shopper} body the updated shopper properties
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShopper(body: Shopper, xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PickShopperId_>>;
};
/**
 * ShoppersApi - object-oriented interface
 * @export
 * @class ShoppersApi
 * @extends {BaseAPI}
 */
export declare class ShoppersApi extends BaseAPI {
    /**
     *
     * @summary Creates a new shopper
     * @param {Shopper} body the shopper to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    createShopper(body: Shopper, options?: AxiosRequestConfig): Promise<AxiosResponse<Shopper>>;
    /**
     *
     * @summary Retrieves all of the groups associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom groups will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    getGroups(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PickGroupIdOrNameOrOwnerId_>>>;
    /**
     *
     * @summary Retrieves all previously purchased items associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom items will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    getItems(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Item>>>;
    /**
     *
     * @summary Retrieves all lists associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom lists will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    getLists(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<List>>>;
    /**
     *
     * @summary Retrieves all locations associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom locations will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    getLocations(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Location>>>;
    /**
     *
     * @summary Retrieves a shopper by ID
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId The ID of the shopper to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    retrieveShopper(xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Shopper>>;
    /**
     *
     * @summary Updates an existing shopper
     * @param {Shopper} body the updated shopper properties
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    updateShopper(body: Shopper, xAuthUser: string, shopperId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PickShopperId_>>;
}
