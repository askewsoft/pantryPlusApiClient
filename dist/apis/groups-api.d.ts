/**
 * pantryplus-api
 * This is the API layer for the PantryPlus mobile app
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { PickGroupIdOrNameOrOwnerId_ } from '../models';
import { PickGroupNameOrId_ } from '../models';
import { Shopper } from '../models';
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export declare const GroupsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Adds a shopper to a group
     * @param {string} body the ID of the shopper to be added
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addShopperToGroup: (body: string, xAuthUser: string, groupId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new group of shoppers
     * @param {PickGroupNameOrId_} body
     * @param {string} xAuthUser the email address of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup: (body: PickGroupNameOrId_, xAuthUser: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup: (xAuthUser: string, groupId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup: (xAuthUser: string, groupId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets all shoppers in an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupShoppers: (xAuthUser: string, groupId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Invites a shopper to join a group
     * @param {string} body
     * @param {string} xAuthUser the email address of the user the email address of the shopper to be invited
     * @param {string} groupId the ID of the group to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteShopper: (body: string, xAuthUser: string, groupId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing group name
     * @param {string} body the new name of the group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroupName: (body: string, xAuthUser: string, groupId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GroupsApi - functional programming interface
 * @export
 */
export declare const GroupsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Adds a shopper to a group
     * @param {string} body the ID of the shopper to be added
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addShopperToGroup(body: string, xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary Creates a new group of shoppers
     * @param {PickGroupNameOrId_} body
     * @param {string} xAuthUser the email address of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(body: PickGroupNameOrId_, xAuthUser: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary Deletes an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary Gets an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PickGroupIdOrNameOrOwnerId_>>>;
    /**
     *
     * @summary Gets all shoppers in an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupShoppers(xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Shopper>>>>;
    /**
     *
     * @summary Invites a shopper to join a group
     * @param {string} body
     * @param {string} xAuthUser the email address of the user the email address of the shopper to be invited
     * @param {string} groupId the ID of the group to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteShopper(body: string, xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary Updates an existing group name
     * @param {string} body the new name of the group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroupName(body: string, xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
};
/**
 * GroupsApi - factory interface
 * @export
 */
export declare const GroupsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Adds a shopper to a group
     * @param {string} body the ID of the shopper to be added
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addShopperToGroup(body: string, xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Creates a new group of shoppers
     * @param {PickGroupNameOrId_} body
     * @param {string} xAuthUser the email address of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(body: PickGroupNameOrId_, xAuthUser: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Deletes an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Gets an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PickGroupIdOrNameOrOwnerId_>>;
    /**
     *
     * @summary Gets all shoppers in an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupShoppers(xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Shopper>>>;
    /**
     *
     * @summary Invites a shopper to join a group
     * @param {string} body
     * @param {string} xAuthUser the email address of the user the email address of the shopper to be invited
     * @param {string} groupId the ID of the group to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteShopper(body: string, xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Updates an existing group name
     * @param {string} body the new name of the group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroupName(body: string, xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
};
/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export declare class GroupsApi extends BaseAPI {
    /**
     *
     * @summary Adds a shopper to a group
     * @param {string} body the ID of the shopper to be added
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    addShopperToGroup(body: string, xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Creates a new group of shoppers
     * @param {PickGroupNameOrId_} body
     * @param {string} xAuthUser the email address of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    createGroup(body: PickGroupNameOrId_, xAuthUser: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Deletes an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    deleteGroup(xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Gets an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    getGroup(xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PickGroupIdOrNameOrOwnerId_>>;
    /**
     *
     * @summary Gets all shoppers in an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    getGroupShoppers(xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Shopper>>>;
    /**
     *
     * @summary Invites a shopper to join a group
     * @param {string} body
     * @param {string} xAuthUser the email address of the user the email address of the shopper to be invited
     * @param {string} groupId the ID of the group to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    inviteShopper(body: string, xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Updates an existing group name
     * @param {string} body the new name of the group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    updateGroupName(body: string, xAuthUser: string, groupId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
}
