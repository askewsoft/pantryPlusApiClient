/**
 * pantryplus-api
 * This is the API layer for the PantryPlus mobile app
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Location } from '../models';
import { PickLocationId_ } from '../models';
import { PickLocationName_ } from '../models';
/**
 * LocationsApi - axios parameter creator
 * @export
 */
export declare const LocationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a new location
     * @param {Location} body the location to create
     * @param {string} xAuthUser the email address of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLocation: (body: Location, xAuthUser: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing location name
     * @param {PickLocationName_} body
     * @param {string} xAuthUser the email address of the user
     * @param {string} locationId the ID of the location to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLocation: (body: PickLocationName_, xAuthUser: string, locationId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LocationsApi - functional programming interface
 * @export
 */
export declare const LocationsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a new location
     * @param {Location} body the location to create
     * @param {string} xAuthUser the email address of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLocation(body: Location, xAuthUser: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PickLocationId_>>>;
    /**
     *
     * @summary Updates an existing location name
     * @param {PickLocationName_} body
     * @param {string} xAuthUser the email address of the user
     * @param {string} locationId the ID of the location to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLocation(body: PickLocationName_, xAuthUser: string, locationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
};
/**
 * LocationsApi - factory interface
 * @export
 */
export declare const LocationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Creates a new location
     * @param {Location} body the location to create
     * @param {string} xAuthUser the email address of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLocation(body: Location, xAuthUser: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PickLocationId_>>;
    /**
     *
     * @summary Updates an existing location name
     * @param {PickLocationName_} body
     * @param {string} xAuthUser the email address of the user
     * @param {string} locationId the ID of the location to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLocation(body: PickLocationName_, xAuthUser: string, locationId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
};
/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
export declare class LocationsApi extends BaseAPI {
    /**
     *
     * @summary Creates a new location
     * @param {Location} body the location to create
     * @param {string} xAuthUser the email address of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    createLocation(body: Location, xAuthUser: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PickLocationId_>>;
    /**
     *
     * @summary Updates an existing location name
     * @param {PickLocationName_} body
     * @param {string} xAuthUser the email address of the user
     * @param {string} locationId the ID of the location to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    updateLocation(body: PickLocationName_, xAuthUser: string, locationId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
}
