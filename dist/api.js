"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * pantryplus-api
 * This is the API layer for the PantryPlus mobile app
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShoppersApi = exports.ShoppersApiFactory = exports.ShoppersApiFp = exports.ShoppersApiAxiosParamCreator = exports.LocationsApi = exports.LocationsApiFactory = exports.LocationsApiFp = exports.LocationsApiAxiosParamCreator = exports.ListsApi = exports.ListsApiFactory = exports.ListsApiFp = exports.ListsApiAxiosParamCreator = exports.ItemsApi = exports.ItemsApiFactory = exports.ItemsApiFp = exports.ItemsApiAxiosParamCreator = exports.GroupsApi = exports.GroupsApiFactory = exports.GroupsApiFp = exports.GroupsApiAxiosParamCreator = exports.CategoriesApi = exports.CategoriesApiFactory = exports.CategoriesApiFp = exports.CategoriesApiAxiosParamCreator = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
/**
 * CategoriesApi - axios parameter creator
 * @export
 */
var CategoriesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Associates an item with a category
         * @param {string} xAuthUser the email address of the user
         * @param {string} categoryId the ID of the category
         * @param {string} itemId the ID of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToCategory: function (xAuthUser_1, categoryId_1, itemId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, categoryId_1, itemId_1], args_1, true), void 0, function (xAuthUser, categoryId, itemId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('addItemToCategory', 'xAuthUser', xAuthUser);
                    // verify required parameter 'categoryId' is not null or undefined
                    (0, common_1.assertParamExists)('addItemToCategory', 'categoryId', categoryId);
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('addItemToCategory', 'itemId', itemId);
                    localVarPath = "/categories/{categoryId}/items/{itemId}"
                        .replace("{".concat("categoryId", "}"), encodeURIComponent(String(categoryId)))
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets the items in a category
         * @param {string} xAuthUser the email address of the user
         * @param {string} categoryId the ID of the category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryItems: function (xAuthUser_1, categoryId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, categoryId_1], args_1, true), void 0, function (xAuthUser, categoryId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('getCategoryItems', 'xAuthUser', xAuthUser);
                    // verify required parameter 'categoryId' is not null or undefined
                    (0, common_1.assertParamExists)('getCategoryItems', 'categoryId', categoryId);
                    localVarPath = "/categories/{categoryId}/items"
                        .replace("{".concat("categoryId", "}"), encodeURIComponent(String(categoryId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Removes an item from a category
         * @param {string} xAuthUser the email address of the user
         * @param {string} categoryId the ID of the category
         * @param {string} itemId the ID of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromCategory: function (xAuthUser_1, categoryId_1, itemId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, categoryId_1, itemId_1], args_1, true), void 0, function (xAuthUser, categoryId, itemId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('removeItemFromCategory', 'xAuthUser', xAuthUser);
                    // verify required parameter 'categoryId' is not null or undefined
                    (0, common_1.assertParamExists)('removeItemFromCategory', 'categoryId', categoryId);
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('removeItemFromCategory', 'itemId', itemId);
                    localVarPath = "/categories/{categoryId}/items/{itemId}"
                        .replace("{".concat("categoryId", "}"), encodeURIComponent(String(categoryId)))
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Updates a category
         * @param {string} xAuthUser the email of the user
         * @param {string} xAuthLocation the ID of the user\&#39;s nearest store location
         * @param {string} categoryId the ID of the category
         * @param {PickCategoryNameOrOrdinal} pickCategoryNameOrOrdinal an object containing the new name and ordinal of the category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: function (xAuthUser_1, xAuthLocation_1, categoryId_1, pickCategoryNameOrOrdinal_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, xAuthLocation_1, categoryId_1, pickCategoryNameOrOrdinal_1], args_1, true), void 0, function (xAuthUser, xAuthLocation, categoryId, pickCategoryNameOrOrdinal, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('updateCategory', 'xAuthUser', xAuthUser);
                    // verify required parameter 'xAuthLocation' is not null or undefined
                    (0, common_1.assertParamExists)('updateCategory', 'xAuthLocation', xAuthLocation);
                    // verify required parameter 'categoryId' is not null or undefined
                    (0, common_1.assertParamExists)('updateCategory', 'categoryId', categoryId);
                    // verify required parameter 'pickCategoryNameOrOrdinal' is not null or undefined
                    (0, common_1.assertParamExists)('updateCategory', 'pickCategoryNameOrOrdinal', pickCategoryNameOrOrdinal);
                    localVarPath = "/categories/{categoryId}"
                        .replace("{".concat("categoryId", "}"), encodeURIComponent(String(categoryId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    if (xAuthLocation != null) {
                        localVarHeaderParameter['X-Auth-Location'] = String(xAuthLocation);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pickCategoryNameOrOrdinal, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CategoriesApiAxiosParamCreator = CategoriesApiAxiosParamCreator;
/**
 * CategoriesApi - functional programming interface
 * @export
 */
var CategoriesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.CategoriesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Associates an item with a category
         * @param {string} xAuthUser the email address of the user
         * @param {string} categoryId the ID of the category
         * @param {string} itemId the ID of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToCategory: function (xAuthUser, categoryId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addItemToCategory(xAuthUser, categoryId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CategoriesApi.addItemToCategory']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets the items in a category
         * @param {string} xAuthUser the email address of the user
         * @param {string} categoryId the ID of the category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryItems: function (xAuthUser, categoryId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCategoryItems(xAuthUser, categoryId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CategoriesApi.getCategoryItems']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Removes an item from a category
         * @param {string} xAuthUser the email address of the user
         * @param {string} categoryId the ID of the category
         * @param {string} itemId the ID of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromCategory: function (xAuthUser, categoryId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.removeItemFromCategory(xAuthUser, categoryId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CategoriesApi.removeItemFromCategory']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a category
         * @param {string} xAuthUser the email of the user
         * @param {string} xAuthLocation the ID of the user\&#39;s nearest store location
         * @param {string} categoryId the ID of the category
         * @param {PickCategoryNameOrOrdinal} pickCategoryNameOrOrdinal an object containing the new name and ordinal of the category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: function (xAuthUser, xAuthLocation, categoryId, pickCategoryNameOrOrdinal, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateCategory(xAuthUser, xAuthLocation, categoryId, pickCategoryNameOrOrdinal, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CategoriesApi.updateCategory']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.CategoriesApiFp = CategoriesApiFp;
/**
 * CategoriesApi - factory interface
 * @export
 */
var CategoriesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.CategoriesApiFp)(configuration);
    return {
        /**
         *
         * @summary Associates an item with a category
         * @param {string} xAuthUser the email address of the user
         * @param {string} categoryId the ID of the category
         * @param {string} itemId the ID of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItemToCategory: function (xAuthUser, categoryId, itemId, options) {
            return localVarFp.addItemToCategory(xAuthUser, categoryId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets the items in a category
         * @param {string} xAuthUser the email address of the user
         * @param {string} categoryId the ID of the category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryItems: function (xAuthUser, categoryId, options) {
            return localVarFp.getCategoryItems(xAuthUser, categoryId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Removes an item from a category
         * @param {string} xAuthUser the email address of the user
         * @param {string} categoryId the ID of the category
         * @param {string} itemId the ID of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromCategory: function (xAuthUser, categoryId, itemId, options) {
            return localVarFp.removeItemFromCategory(xAuthUser, categoryId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates a category
         * @param {string} xAuthUser the email of the user
         * @param {string} xAuthLocation the ID of the user\&#39;s nearest store location
         * @param {string} categoryId the ID of the category
         * @param {PickCategoryNameOrOrdinal} pickCategoryNameOrOrdinal an object containing the new name and ordinal of the category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: function (xAuthUser, xAuthLocation, categoryId, pickCategoryNameOrOrdinal, options) {
            return localVarFp.updateCategory(xAuthUser, xAuthLocation, categoryId, pickCategoryNameOrOrdinal, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CategoriesApiFactory = CategoriesApiFactory;
/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
var CategoriesApi = /** @class */ (function (_super) {
    __extends(CategoriesApi, _super);
    function CategoriesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Associates an item with a category
     * @param {string} xAuthUser the email address of the user
     * @param {string} categoryId the ID of the category
     * @param {string} itemId the ID of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    CategoriesApi.prototype.addItemToCategory = function (xAuthUser, categoryId, itemId, options) {
        var _this = this;
        return (0, exports.CategoriesApiFp)(this.configuration).addItemToCategory(xAuthUser, categoryId, itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets the items in a category
     * @param {string} xAuthUser the email address of the user
     * @param {string} categoryId the ID of the category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    CategoriesApi.prototype.getCategoryItems = function (xAuthUser, categoryId, options) {
        var _this = this;
        return (0, exports.CategoriesApiFp)(this.configuration).getCategoryItems(xAuthUser, categoryId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Removes an item from a category
     * @param {string} xAuthUser the email address of the user
     * @param {string} categoryId the ID of the category
     * @param {string} itemId the ID of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    CategoriesApi.prototype.removeItemFromCategory = function (xAuthUser, categoryId, itemId, options) {
        var _this = this;
        return (0, exports.CategoriesApiFp)(this.configuration).removeItemFromCategory(xAuthUser, categoryId, itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates a category
     * @param {string} xAuthUser the email of the user
     * @param {string} xAuthLocation the ID of the user\&#39;s nearest store location
     * @param {string} categoryId the ID of the category
     * @param {PickCategoryNameOrOrdinal} pickCategoryNameOrOrdinal an object containing the new name and ordinal of the category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    CategoriesApi.prototype.updateCategory = function (xAuthUser, xAuthLocation, categoryId, pickCategoryNameOrOrdinal, options) {
        var _this = this;
        return (0, exports.CategoriesApiFp)(this.configuration).updateCategory(xAuthUser, xAuthLocation, categoryId, pickCategoryNameOrOrdinal, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CategoriesApi;
}(base_1.BaseAPI));
exports.CategoriesApi = CategoriesApi;
/**
 * GroupsApi - axios parameter creator
 * @export
 */
var GroupsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Adds a shopper to a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {PickShopperId} pickShopperId an object containing the ID of the shopper to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addShopperToGroup: function (xAuthUser_1, groupId_1, pickShopperId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, groupId_1, pickShopperId_1], args_1, true), void 0, function (xAuthUser, groupId, pickShopperId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('addShopperToGroup', 'xAuthUser', xAuthUser);
                    // verify required parameter 'groupId' is not null or undefined
                    (0, common_1.assertParamExists)('addShopperToGroup', 'groupId', groupId);
                    // verify required parameter 'pickShopperId' is not null or undefined
                    (0, common_1.assertParamExists)('addShopperToGroup', 'pickShopperId', pickShopperId);
                    localVarPath = "/groups/{groupId}/shoppers"
                        .replace("{".concat("groupId", "}"), encodeURIComponent(String(groupId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pickShopperId, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Creates a new group of shoppers
         * @param {string} xAuthUser the email address of the user
         * @param {PickGroupNameOrId} pickGroupNameOrId an object containing the name and ID of the group to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: function (xAuthUser_1, pickGroupNameOrId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, pickGroupNameOrId_1], args_1, true), void 0, function (xAuthUser, pickGroupNameOrId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('createGroup', 'xAuthUser', xAuthUser);
                    // verify required parameter 'pickGroupNameOrId' is not null or undefined
                    (0, common_1.assertParamExists)('createGroup', 'pickGroupNameOrId', pickGroupNameOrId);
                    localVarPath = "/groups";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pickGroupNameOrId, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Deletes an existing group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: function (xAuthUser_1, groupId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, groupId_1], args_1, true), void 0, function (xAuthUser, groupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('deleteGroup', 'xAuthUser', xAuthUser);
                    // verify required parameter 'groupId' is not null or undefined
                    (0, common_1.assertParamExists)('deleteGroup', 'groupId', groupId);
                    localVarPath = "/groups/{groupId}"
                        .replace("{".concat("groupId", "}"), encodeURIComponent(String(groupId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets an existing group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: function (xAuthUser_1, groupId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, groupId_1], args_1, true), void 0, function (xAuthUser, groupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('getGroup', 'xAuthUser', xAuthUser);
                    // verify required parameter 'groupId' is not null or undefined
                    (0, common_1.assertParamExists)('getGroup', 'groupId', groupId);
                    localVarPath = "/groups/{groupId}"
                        .replace("{".concat("groupId", "}"), encodeURIComponent(String(groupId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets all shoppers in an existing group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupShoppers: function (xAuthUser_1, groupId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, groupId_1], args_1, true), void 0, function (xAuthUser, groupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('getGroupShoppers', 'xAuthUser', xAuthUser);
                    // verify required parameter 'groupId' is not null or undefined
                    (0, common_1.assertParamExists)('getGroupShoppers', 'groupId', groupId);
                    localVarPath = "/groups/{groupId}/shoppers"
                        .replace("{".concat("groupId", "}"), encodeURIComponent(String(groupId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Gets all invitees for a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvitees: function (xAuthUser_1, groupId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, groupId_1], args_1, true), void 0, function (xAuthUser, groupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('getInvitees', 'xAuthUser', xAuthUser);
                    // verify required parameter 'groupId' is not null or undefined
                    (0, common_1.assertParamExists)('getInvitees', 'groupId', groupId);
                    localVarPath = "/groups/{groupId}/invitees"
                        .replace("{".concat("groupId", "}"), encodeURIComponent(String(groupId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Invites a shopper to join a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {PickShopperEmail} pickShopperEmail an object containing the email address of the shopper to be invited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteShopper: function (xAuthUser_1, groupId_1, pickShopperEmail_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, groupId_1, pickShopperEmail_1], args_1, true), void 0, function (xAuthUser, groupId, pickShopperEmail, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('inviteShopper', 'xAuthUser', xAuthUser);
                    // verify required parameter 'groupId' is not null or undefined
                    (0, common_1.assertParamExists)('inviteShopper', 'groupId', groupId);
                    // verify required parameter 'pickShopperEmail' is not null or undefined
                    (0, common_1.assertParamExists)('inviteShopper', 'pickShopperEmail', pickShopperEmail);
                    localVarPath = "/groups/{groupId}/invitees"
                        .replace("{".concat("groupId", "}"), encodeURIComponent(String(groupId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pickShopperEmail, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Removes a shopper from a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {string} shopperId the ID of the shopper to be removed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeShopperFromGroup: function (xAuthUser_1, groupId_1, shopperId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, groupId_1, shopperId_1], args_1, true), void 0, function (xAuthUser, groupId, shopperId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('removeShopperFromGroup', 'xAuthUser', xAuthUser);
                    // verify required parameter 'groupId' is not null or undefined
                    (0, common_1.assertParamExists)('removeShopperFromGroup', 'groupId', groupId);
                    // verify required parameter 'shopperId' is not null or undefined
                    (0, common_1.assertParamExists)('removeShopperFromGroup', 'shopperId', shopperId);
                    localVarPath = "/groups/{groupId}/shoppers/{shopperId}"
                        .replace("{".concat("groupId", "}"), encodeURIComponent(String(groupId)))
                        .replace("{".concat("shopperId", "}"), encodeURIComponent(String(shopperId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Uninvites a shopper from a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {PickShopperEmail} pickShopperEmail an object containing the email address of the shopper to be uninvited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uninviteShopper: function (xAuthUser_1, groupId_1, pickShopperEmail_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, groupId_1, pickShopperEmail_1], args_1, true), void 0, function (xAuthUser, groupId, pickShopperEmail, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('uninviteShopper', 'xAuthUser', xAuthUser);
                    // verify required parameter 'groupId' is not null or undefined
                    (0, common_1.assertParamExists)('uninviteShopper', 'groupId', groupId);
                    // verify required parameter 'pickShopperEmail' is not null or undefined
                    (0, common_1.assertParamExists)('uninviteShopper', 'pickShopperEmail', pickShopperEmail);
                    localVarPath = "/groups/{groupId}/invitees"
                        .replace("{".concat("groupId", "}"), encodeURIComponent(String(groupId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pickShopperEmail, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Updates an existing group name
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {PickGroupName} pickGroupName an object containing the new name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupName: function (xAuthUser_1, groupId_1, pickGroupName_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, groupId_1, pickGroupName_1], args_1, true), void 0, function (xAuthUser, groupId, pickGroupName, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('updateGroupName', 'xAuthUser', xAuthUser);
                    // verify required parameter 'groupId' is not null or undefined
                    (0, common_1.assertParamExists)('updateGroupName', 'groupId', groupId);
                    // verify required parameter 'pickGroupName' is not null or undefined
                    (0, common_1.assertParamExists)('updateGroupName', 'pickGroupName', pickGroupName);
                    localVarPath = "/groups/{groupId}"
                        .replace("{".concat("groupId", "}"), encodeURIComponent(String(groupId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pickGroupName, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.GroupsApiAxiosParamCreator = GroupsApiAxiosParamCreator;
/**
 * GroupsApi - functional programming interface
 * @export
 */
var GroupsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.GroupsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Adds a shopper to a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {PickShopperId} pickShopperId an object containing the ID of the shopper to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addShopperToGroup: function (xAuthUser, groupId, pickShopperId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addShopperToGroup(xAuthUser, groupId, pickShopperId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.addShopperToGroup']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates a new group of shoppers
         * @param {string} xAuthUser the email address of the user
         * @param {PickGroupNameOrId} pickGroupNameOrId an object containing the name and ID of the group to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: function (xAuthUser, pickGroupNameOrId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createGroup(xAuthUser, pickGroupNameOrId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.createGroup']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Deletes an existing group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: function (xAuthUser, groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteGroup(xAuthUser, groupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.deleteGroup']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets an existing group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: function (xAuthUser, groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getGroup(xAuthUser, groupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.getGroup']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all shoppers in an existing group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupShoppers: function (xAuthUser, groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getGroupShoppers(xAuthUser, groupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.getGroupShoppers']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Gets all invitees for a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvitees: function (xAuthUser, groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getInvitees(xAuthUser, groupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.getInvitees']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Invites a shopper to join a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {PickShopperEmail} pickShopperEmail an object containing the email address of the shopper to be invited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteShopper: function (xAuthUser, groupId, pickShopperEmail, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.inviteShopper(xAuthUser, groupId, pickShopperEmail, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.inviteShopper']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Removes a shopper from a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {string} shopperId the ID of the shopper to be removed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeShopperFromGroup: function (xAuthUser, groupId, shopperId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.removeShopperFromGroup(xAuthUser, groupId, shopperId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.removeShopperFromGroup']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Uninvites a shopper from a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {PickShopperEmail} pickShopperEmail an object containing the email address of the shopper to be uninvited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uninviteShopper: function (xAuthUser, groupId, pickShopperEmail, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.uninviteShopper(xAuthUser, groupId, pickShopperEmail, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.uninviteShopper']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates an existing group name
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {PickGroupName} pickGroupName an object containing the new name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupName: function (xAuthUser, groupId, pickGroupName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateGroupName(xAuthUser, groupId, pickGroupName, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.updateGroupName']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.GroupsApiFp = GroupsApiFp;
/**
 * GroupsApi - factory interface
 * @export
 */
var GroupsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.GroupsApiFp)(configuration);
    return {
        /**
         *
         * @summary Adds a shopper to a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {PickShopperId} pickShopperId an object containing the ID of the shopper to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addShopperToGroup: function (xAuthUser, groupId, pickShopperId, options) {
            return localVarFp.addShopperToGroup(xAuthUser, groupId, pickShopperId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Creates a new group of shoppers
         * @param {string} xAuthUser the email address of the user
         * @param {PickGroupNameOrId} pickGroupNameOrId an object containing the name and ID of the group to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: function (xAuthUser, pickGroupNameOrId, options) {
            return localVarFp.createGroup(xAuthUser, pickGroupNameOrId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Deletes an existing group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: function (xAuthUser, groupId, options) {
            return localVarFp.deleteGroup(xAuthUser, groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets an existing group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: function (xAuthUser, groupId, options) {
            return localVarFp.getGroup(xAuthUser, groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets all shoppers in an existing group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupShoppers: function (xAuthUser, groupId, options) {
            return localVarFp.getGroupShoppers(xAuthUser, groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Gets all invitees for a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvitees: function (xAuthUser, groupId, options) {
            return localVarFp.getInvitees(xAuthUser, groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Invites a shopper to join a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {PickShopperEmail} pickShopperEmail an object containing the email address of the shopper to be invited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteShopper: function (xAuthUser, groupId, pickShopperEmail, options) {
            return localVarFp.inviteShopper(xAuthUser, groupId, pickShopperEmail, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Removes a shopper from a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {string} shopperId the ID of the shopper to be removed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeShopperFromGroup: function (xAuthUser, groupId, shopperId, options) {
            return localVarFp.removeShopperFromGroup(xAuthUser, groupId, shopperId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Uninvites a shopper from a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {PickShopperEmail} pickShopperEmail an object containing the email address of the shopper to be uninvited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uninviteShopper: function (xAuthUser, groupId, pickShopperEmail, options) {
            return localVarFp.uninviteShopper(xAuthUser, groupId, pickShopperEmail, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates an existing group name
         * @param {string} xAuthUser the email address of the user
         * @param {string} groupId the ID of the group to be updated
         * @param {PickGroupName} pickGroupName an object containing the new name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupName: function (xAuthUser, groupId, pickGroupName, options) {
            return localVarFp.updateGroupName(xAuthUser, groupId, pickGroupName, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.GroupsApiFactory = GroupsApiFactory;
/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
var GroupsApi = /** @class */ (function (_super) {
    __extends(GroupsApi, _super);
    function GroupsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Adds a shopper to a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickShopperId} pickShopperId an object containing the ID of the shopper to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.addShopperToGroup = function (xAuthUser, groupId, pickShopperId, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).addShopperToGroup(xAuthUser, groupId, pickShopperId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Creates a new group of shoppers
     * @param {string} xAuthUser the email address of the user
     * @param {PickGroupNameOrId} pickGroupNameOrId an object containing the name and ID of the group to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.createGroup = function (xAuthUser, pickGroupNameOrId, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).createGroup(xAuthUser, pickGroupNameOrId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Deletes an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.deleteGroup = function (xAuthUser, groupId, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).deleteGroup(xAuthUser, groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.getGroup = function (xAuthUser, groupId, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).getGroup(xAuthUser, groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets all shoppers in an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.getGroupShoppers = function (xAuthUser, groupId, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).getGroupShoppers(xAuthUser, groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Gets all invitees for a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.getInvitees = function (xAuthUser, groupId, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).getInvitees(xAuthUser, groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Invites a shopper to join a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickShopperEmail} pickShopperEmail an object containing the email address of the shopper to be invited
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.inviteShopper = function (xAuthUser, groupId, pickShopperEmail, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).inviteShopper(xAuthUser, groupId, pickShopperEmail, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Removes a shopper from a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {string} shopperId the ID of the shopper to be removed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.removeShopperFromGroup = function (xAuthUser, groupId, shopperId, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).removeShopperFromGroup(xAuthUser, groupId, shopperId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Uninvites a shopper from a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickShopperEmail} pickShopperEmail an object containing the email address of the shopper to be uninvited
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.uninviteShopper = function (xAuthUser, groupId, pickShopperEmail, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).uninviteShopper(xAuthUser, groupId, pickShopperEmail, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates an existing group name
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickGroupName} pickGroupName an object containing the new name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.updateGroupName = function (xAuthUser, groupId, pickGroupName, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).updateGroupName(xAuthUser, groupId, pickGroupName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return GroupsApi;
}(base_1.BaseAPI));
exports.GroupsApi = GroupsApi;
/**
 * ItemsApi - axios parameter creator
 * @export
 */
var ItemsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Creates an item
         * @param {string} xAuthUser
         * @param {Item} item an object containing the ID, name, and UPC of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem: function (xAuthUser_1, item_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, item_1], args_1, true), void 0, function (xAuthUser, item, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('createItem', 'xAuthUser', xAuthUser);
                    // verify required parameter 'item' is not null or undefined
                    (0, common_1.assertParamExists)('createItem', 'item', item);
                    localVarPath = "/items";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(item, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Updates an item
         * @param {string} xAuthUser
         * @param {string} itemId the ID of the item
         * @param {PickItemNameOrUpc} pickItemNameOrUpc an object containing the new name and UPC of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (xAuthUser_1, itemId_1, pickItemNameOrUpc_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, itemId_1, pickItemNameOrUpc_1], args_1, true), void 0, function (xAuthUser, itemId, pickItemNameOrUpc, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('updateItem', 'xAuthUser', xAuthUser);
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('updateItem', 'itemId', itemId);
                    // verify required parameter 'pickItemNameOrUpc' is not null or undefined
                    (0, common_1.assertParamExists)('updateItem', 'pickItemNameOrUpc', pickItemNameOrUpc);
                    localVarPath = "/items/{itemId}"
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pickItemNameOrUpc, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ItemsApiAxiosParamCreator = ItemsApiAxiosParamCreator;
/**
 * ItemsApi - functional programming interface
 * @export
 */
var ItemsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ItemsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Creates an item
         * @param {string} xAuthUser
         * @param {Item} item an object containing the ID, name, and UPC of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem: function (xAuthUser, item, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createItem(xAuthUser, item, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ItemsApi.createItem']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates an item
         * @param {string} xAuthUser
         * @param {string} itemId the ID of the item
         * @param {PickItemNameOrUpc} pickItemNameOrUpc an object containing the new name and UPC of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (xAuthUser, itemId, pickItemNameOrUpc, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateItem(xAuthUser, itemId, pickItemNameOrUpc, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ItemsApi.updateItem']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ItemsApiFp = ItemsApiFp;
/**
 * ItemsApi - factory interface
 * @export
 */
var ItemsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ItemsApiFp)(configuration);
    return {
        /**
         *
         * @summary Creates an item
         * @param {string} xAuthUser
         * @param {Item} item an object containing the ID, name, and UPC of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem: function (xAuthUser, item, options) {
            return localVarFp.createItem(xAuthUser, item, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates an item
         * @param {string} xAuthUser
         * @param {string} itemId the ID of the item
         * @param {PickItemNameOrUpc} pickItemNameOrUpc an object containing the new name and UPC of the item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (xAuthUser, itemId, pickItemNameOrUpc, options) {
            return localVarFp.updateItem(xAuthUser, itemId, pickItemNameOrUpc, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ItemsApiFactory = ItemsApiFactory;
/**
 * ItemsApi - object-oriented interface
 * @export
 * @class ItemsApi
 * @extends {BaseAPI}
 */
var ItemsApi = /** @class */ (function (_super) {
    __extends(ItemsApi, _super);
    function ItemsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Creates an item
     * @param {string} xAuthUser
     * @param {Item} item an object containing the ID, name, and UPC of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    ItemsApi.prototype.createItem = function (xAuthUser, item, options) {
        var _this = this;
        return (0, exports.ItemsApiFp)(this.configuration).createItem(xAuthUser, item, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates an item
     * @param {string} xAuthUser
     * @param {string} itemId the ID of the item
     * @param {PickItemNameOrUpc} pickItemNameOrUpc an object containing the new name and UPC of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    ItemsApi.prototype.updateItem = function (xAuthUser, itemId, pickItemNameOrUpc, options) {
        var _this = this;
        return (0, exports.ItemsApiFp)(this.configuration).updateItem(xAuthUser, itemId, pickItemNameOrUpc, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ItemsApi;
}(base_1.BaseAPI));
exports.ItemsApi = ItemsApi;
/**
 * ListsApi - axios parameter creator
 * @export
 */
var ListsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Associates an item with a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to associate with the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItem: function (xAuthUser_1, listId_1, itemId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, listId_1, itemId_1], args_1, true), void 0, function (xAuthUser, listId, itemId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('addItem', 'xAuthUser', xAuthUser);
                    // verify required parameter 'listId' is not null or undefined
                    (0, common_1.assertParamExists)('addItem', 'listId', listId);
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('addItem', 'itemId', itemId);
                    localVarPath = "/lists/{listId}/items/{itemId}"
                        .replace("{".concat("listId", "}"), encodeURIComponent(String(listId)))
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Adds a category to a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the user\&#39;s nearest store location
         * @param {string} listId the ID of the list
         * @param {Category} category the category to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: function (xAuthUser_1, xAuthLocation_1, listId_1, category_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, xAuthLocation_1, listId_1, category_1], args_1, true), void 0, function (xAuthUser, xAuthLocation, listId, category, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('createCategory', 'xAuthUser', xAuthUser);
                    // verify required parameter 'xAuthLocation' is not null or undefined
                    (0, common_1.assertParamExists)('createCategory', 'xAuthLocation', xAuthLocation);
                    // verify required parameter 'listId' is not null or undefined
                    (0, common_1.assertParamExists)('createCategory', 'listId', listId);
                    // verify required parameter 'category' is not null or undefined
                    (0, common_1.assertParamExists)('createCategory', 'category', category);
                    localVarPath = "/lists/{listId}/categories"
                        .replace("{".concat("listId", "}"), encodeURIComponent(String(listId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    if (xAuthLocation != null) {
                        localVarHeaderParameter['X-Auth-Location'] = String(xAuthLocation);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(category, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Creates a new list of items
         * @param {string} xAuthUser the email address of the user
         * @param {List} list the list to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createList: function (xAuthUser_1, list_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, list_1], args_1, true), void 0, function (xAuthUser, list, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('createList', 'xAuthUser', xAuthUser);
                    // verify required parameter 'list' is not null or undefined
                    (0, common_1.assertParamExists)('createList', 'list', list);
                    localVarPath = "/lists";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(list, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Deletes a list of items
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteList: function (xAuthUser_1, listId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, listId_1], args_1, true), void 0, function (xAuthUser, listId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('deleteList', 'xAuthUser', xAuthUser);
                    // verify required parameter 'listId' is not null or undefined
                    (0, common_1.assertParamExists)('deleteList', 'listId', listId);
                    localVarPath = "/lists/{listId}"
                        .replace("{".concat("listId", "}"), encodeURIComponent(String(listId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieves the categories for a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: function (xAuthUser_1, xAuthLocation_1, listId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, xAuthLocation_1, listId_1], args_1, true), void 0, function (xAuthUser, xAuthLocation, listId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('getCategories', 'xAuthUser', xAuthUser);
                    // verify required parameter 'xAuthLocation' is not null or undefined
                    (0, common_1.assertParamExists)('getCategories', 'xAuthLocation', xAuthLocation);
                    // verify required parameter 'listId' is not null or undefined
                    (0, common_1.assertParamExists)('getCategories', 'listId', listId);
                    localVarPath = "/lists/{listId}/categories"
                        .replace("{".concat("listId", "}"), encodeURIComponent(String(listId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    if (xAuthLocation != null) {
                        localVarHeaderParameter['X-Auth-Location'] = String(xAuthLocation);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieves the uncategorized items for a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListItems: function (xAuthUser_1, listId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, listId_1], args_1, true), void 0, function (xAuthUser, listId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('getListItems', 'xAuthUser', xAuthUser);
                    // verify required parameter 'listId' is not null or undefined
                    (0, common_1.assertParamExists)('getListItems', 'listId', listId);
                    localVarPath = "/lists/{listId}/items"
                        .replace("{".concat("listId", "}"), encodeURIComponent(String(listId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Purchases an item on a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to purchase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseItem: function (xAuthUser_1, xAuthLocation_1, listId_1, itemId_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, xAuthLocation_1, listId_1, itemId_1], args_1, true), void 0, function (xAuthUser, xAuthLocation, listId, itemId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('purchaseItem', 'xAuthUser', xAuthUser);
                    // verify required parameter 'xAuthLocation' is not null or undefined
                    (0, common_1.assertParamExists)('purchaseItem', 'xAuthLocation', xAuthLocation);
                    // verify required parameter 'listId' is not null or undefined
                    (0, common_1.assertParamExists)('purchaseItem', 'listId', listId);
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('purchaseItem', 'itemId', itemId);
                    localVarPath = "/lists/{listId}/items/{itemId}/purchase"
                        .replace("{".concat("listId", "}"), encodeURIComponent(String(listId)))
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    if (xAuthLocation != null) {
                        localVarHeaderParameter['X-Auth-Location'] = String(xAuthLocation);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Removes a category from a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} categoryId the ID of the category to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCategory: function (xAuthUser_1, listId_1, categoryId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, listId_1, categoryId_1], args_1, true), void 0, function (xAuthUser, listId, categoryId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('removeCategory', 'xAuthUser', xAuthUser);
                    // verify required parameter 'listId' is not null or undefined
                    (0, common_1.assertParamExists)('removeCategory', 'listId', listId);
                    // verify required parameter 'categoryId' is not null or undefined
                    (0, common_1.assertParamExists)('removeCategory', 'categoryId', categoryId);
                    localVarPath = "/lists/{listId}/categories/{categoryId}"
                        .replace("{".concat("listId", "}"), encodeURIComponent(String(listId)))
                        .replace("{".concat("categoryId", "}"), encodeURIComponent(String(categoryId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Removes an item from a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItem: function (xAuthUser_1, listId_1, itemId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, listId_1, itemId_1], args_1, true), void 0, function (xAuthUser, listId, itemId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('removeItem', 'xAuthUser', xAuthUser);
                    // verify required parameter 'listId' is not null or undefined
                    (0, common_1.assertParamExists)('removeItem', 'listId', listId);
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('removeItem', 'itemId', itemId);
                    localVarPath = "/lists/{listId}/items/{itemId}"
                        .replace("{".concat("listId", "}"), encodeURIComponent(String(listId)))
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Removes the purchase of an item from purchase history
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to remove
         * @param {UnpurchaseItemRequest} unpurchaseItemRequest an object containing the date of purchase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpurchaseItem: function (xAuthUser_1, xAuthLocation_1, listId_1, itemId_1, unpurchaseItemRequest_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, xAuthLocation_1, listId_1, itemId_1, unpurchaseItemRequest_1], args_1, true), void 0, function (xAuthUser, xAuthLocation, listId, itemId, unpurchaseItemRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('unpurchaseItem', 'xAuthUser', xAuthUser);
                    // verify required parameter 'xAuthLocation' is not null or undefined
                    (0, common_1.assertParamExists)('unpurchaseItem', 'xAuthLocation', xAuthLocation);
                    // verify required parameter 'listId' is not null or undefined
                    (0, common_1.assertParamExists)('unpurchaseItem', 'listId', listId);
                    // verify required parameter 'itemId' is not null or undefined
                    (0, common_1.assertParamExists)('unpurchaseItem', 'itemId', itemId);
                    // verify required parameter 'unpurchaseItemRequest' is not null or undefined
                    (0, common_1.assertParamExists)('unpurchaseItem', 'unpurchaseItemRequest', unpurchaseItemRequest);
                    localVarPath = "/lists/{listId}/items/{itemId}/purchase"
                        .replace("{".concat("listId", "}"), encodeURIComponent(String(listId)))
                        .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    if (xAuthLocation != null) {
                        localVarHeaderParameter['X-Auth-Location'] = String(xAuthLocation);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(unpurchaseItemRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Updates a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {PickListNameOrGroupIdOrOrdinal} pickListNameOrGroupIdOrOrdinal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateList: function (xAuthUser_1, listId_1, pickListNameOrGroupIdOrOrdinal_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, listId_1, pickListNameOrGroupIdOrOrdinal_1], args_1, true), void 0, function (xAuthUser, listId, pickListNameOrGroupIdOrOrdinal, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('updateList', 'xAuthUser', xAuthUser);
                    // verify required parameter 'listId' is not null or undefined
                    (0, common_1.assertParamExists)('updateList', 'listId', listId);
                    // verify required parameter 'pickListNameOrGroupIdOrOrdinal' is not null or undefined
                    (0, common_1.assertParamExists)('updateList', 'pickListNameOrGroupIdOrOrdinal', pickListNameOrGroupIdOrOrdinal);
                    localVarPath = "/lists/{listId}"
                        .replace("{".concat("listId", "}"), encodeURIComponent(String(listId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pickListNameOrGroupIdOrOrdinal, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ListsApiAxiosParamCreator = ListsApiAxiosParamCreator;
/**
 * ListsApi - functional programming interface
 * @export
 */
var ListsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ListsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Associates an item with a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to associate with the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItem: function (xAuthUser, listId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addItem(xAuthUser, listId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ListsApi.addItem']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Adds a category to a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the user\&#39;s nearest store location
         * @param {string} listId the ID of the list
         * @param {Category} category the category to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: function (xAuthUser, xAuthLocation, listId, category, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createCategory(xAuthUser, xAuthLocation, listId, category, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ListsApi.createCategory']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates a new list of items
         * @param {string} xAuthUser the email address of the user
         * @param {List} list the list to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createList: function (xAuthUser, list, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createList(xAuthUser, list, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ListsApi.createList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Deletes a list of items
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteList: function (xAuthUser, listId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteList(xAuthUser, listId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ListsApi.deleteList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieves the categories for a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: function (xAuthUser, xAuthLocation, listId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCategories(xAuthUser, xAuthLocation, listId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ListsApi.getCategories']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieves the uncategorized items for a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListItems: function (xAuthUser, listId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getListItems(xAuthUser, listId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ListsApi.getListItems']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Purchases an item on a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to purchase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseItem: function (xAuthUser, xAuthLocation, listId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.purchaseItem(xAuthUser, xAuthLocation, listId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ListsApi.purchaseItem']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Removes a category from a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} categoryId the ID of the category to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCategory: function (xAuthUser, listId, categoryId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.removeCategory(xAuthUser, listId, categoryId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ListsApi.removeCategory']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Removes an item from a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItem: function (xAuthUser, listId, itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.removeItem(xAuthUser, listId, itemId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ListsApi.removeItem']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Removes the purchase of an item from purchase history
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to remove
         * @param {UnpurchaseItemRequest} unpurchaseItemRequest an object containing the date of purchase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpurchaseItem: function (xAuthUser, xAuthLocation, listId, itemId, unpurchaseItemRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unpurchaseItem(xAuthUser, xAuthLocation, listId, itemId, unpurchaseItemRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ListsApi.unpurchaseItem']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {PickListNameOrGroupIdOrOrdinal} pickListNameOrGroupIdOrOrdinal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateList: function (xAuthUser, listId, pickListNameOrGroupIdOrOrdinal, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateList(xAuthUser, listId, pickListNameOrGroupIdOrOrdinal, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ListsApi.updateList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ListsApiFp = ListsApiFp;
/**
 * ListsApi - factory interface
 * @export
 */
var ListsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ListsApiFp)(configuration);
    return {
        /**
         *
         * @summary Associates an item with a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to associate with the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addItem: function (xAuthUser, listId, itemId, options) {
            return localVarFp.addItem(xAuthUser, listId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Adds a category to a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the user\&#39;s nearest store location
         * @param {string} listId the ID of the list
         * @param {Category} category the category to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: function (xAuthUser, xAuthLocation, listId, category, options) {
            return localVarFp.createCategory(xAuthUser, xAuthLocation, listId, category, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Creates a new list of items
         * @param {string} xAuthUser the email address of the user
         * @param {List} list the list to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createList: function (xAuthUser, list, options) {
            return localVarFp.createList(xAuthUser, list, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Deletes a list of items
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteList: function (xAuthUser, listId, options) {
            return localVarFp.deleteList(xAuthUser, listId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieves the categories for a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: function (xAuthUser, xAuthLocation, listId, options) {
            return localVarFp.getCategories(xAuthUser, xAuthLocation, listId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieves the uncategorized items for a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListItems: function (xAuthUser, listId, options) {
            return localVarFp.getListItems(xAuthUser, listId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Purchases an item on a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to purchase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseItem: function (xAuthUser, xAuthLocation, listId, itemId, options) {
            return localVarFp.purchaseItem(xAuthUser, xAuthLocation, listId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Removes a category from a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} categoryId the ID of the category to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCategory: function (xAuthUser, listId, categoryId, options) {
            return localVarFp.removeCategory(xAuthUser, listId, categoryId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Removes an item from a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItem: function (xAuthUser, listId, itemId, options) {
            return localVarFp.removeItem(xAuthUser, listId, itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Removes the purchase of an item from purchase history
         * @param {string} xAuthUser the email address of the user
         * @param {string} xAuthLocation the ID of the location
         * @param {string} listId the ID of the list
         * @param {string} itemId the ID of the item to remove
         * @param {UnpurchaseItemRequest} unpurchaseItemRequest an object containing the date of purchase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpurchaseItem: function (xAuthUser, xAuthLocation, listId, itemId, unpurchaseItemRequest, options) {
            return localVarFp.unpurchaseItem(xAuthUser, xAuthLocation, listId, itemId, unpurchaseItemRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates a list
         * @param {string} xAuthUser the email address of the user
         * @param {string} listId the ID of the list
         * @param {PickListNameOrGroupIdOrOrdinal} pickListNameOrGroupIdOrOrdinal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateList: function (xAuthUser, listId, pickListNameOrGroupIdOrOrdinal, options) {
            return localVarFp.updateList(xAuthUser, listId, pickListNameOrGroupIdOrOrdinal, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ListsApiFactory = ListsApiFactory;
/**
 * ListsApi - object-oriented interface
 * @export
 * @class ListsApi
 * @extends {BaseAPI}
 */
var ListsApi = /** @class */ (function (_super) {
    __extends(ListsApi, _super);
    function ListsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Associates an item with a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to associate with the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    ListsApi.prototype.addItem = function (xAuthUser, listId, itemId, options) {
        var _this = this;
        return (0, exports.ListsApiFp)(this.configuration).addItem(xAuthUser, listId, itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Adds a category to a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the user\&#39;s nearest store location
     * @param {string} listId the ID of the list
     * @param {Category} category the category to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    ListsApi.prototype.createCategory = function (xAuthUser, xAuthLocation, listId, category, options) {
        var _this = this;
        return (0, exports.ListsApiFp)(this.configuration).createCategory(xAuthUser, xAuthLocation, listId, category, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Creates a new list of items
     * @param {string} xAuthUser the email address of the user
     * @param {List} list the list to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    ListsApi.prototype.createList = function (xAuthUser, list, options) {
        var _this = this;
        return (0, exports.ListsApiFp)(this.configuration).createList(xAuthUser, list, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Deletes a list of items
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    ListsApi.prototype.deleteList = function (xAuthUser, listId, options) {
        var _this = this;
        return (0, exports.ListsApiFp)(this.configuration).deleteList(xAuthUser, listId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieves the categories for a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    ListsApi.prototype.getCategories = function (xAuthUser, xAuthLocation, listId, options) {
        var _this = this;
        return (0, exports.ListsApiFp)(this.configuration).getCategories(xAuthUser, xAuthLocation, listId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieves the uncategorized items for a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    ListsApi.prototype.getListItems = function (xAuthUser, listId, options) {
        var _this = this;
        return (0, exports.ListsApiFp)(this.configuration).getListItems(xAuthUser, listId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Purchases an item on a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to purchase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    ListsApi.prototype.purchaseItem = function (xAuthUser, xAuthLocation, listId, itemId, options) {
        var _this = this;
        return (0, exports.ListsApiFp)(this.configuration).purchaseItem(xAuthUser, xAuthLocation, listId, itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Removes a category from a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} categoryId the ID of the category to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    ListsApi.prototype.removeCategory = function (xAuthUser, listId, categoryId, options) {
        var _this = this;
        return (0, exports.ListsApiFp)(this.configuration).removeCategory(xAuthUser, listId, categoryId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Removes an item from a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    ListsApi.prototype.removeItem = function (xAuthUser, listId, itemId, options) {
        var _this = this;
        return (0, exports.ListsApiFp)(this.configuration).removeItem(xAuthUser, listId, itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Removes the purchase of an item from purchase history
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to remove
     * @param {UnpurchaseItemRequest} unpurchaseItemRequest an object containing the date of purchase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    ListsApi.prototype.unpurchaseItem = function (xAuthUser, xAuthLocation, listId, itemId, unpurchaseItemRequest, options) {
        var _this = this;
        return (0, exports.ListsApiFp)(this.configuration).unpurchaseItem(xAuthUser, xAuthLocation, listId, itemId, unpurchaseItemRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {PickListNameOrGroupIdOrOrdinal} pickListNameOrGroupIdOrOrdinal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    ListsApi.prototype.updateList = function (xAuthUser, listId, pickListNameOrGroupIdOrOrdinal, options) {
        var _this = this;
        return (0, exports.ListsApiFp)(this.configuration).updateList(xAuthUser, listId, pickListNameOrGroupIdOrOrdinal, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ListsApi;
}(base_1.BaseAPI));
exports.ListsApi = ListsApi;
/**
 * LocationsApi - axios parameter creator
 * @export
 */
var LocationsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Creates a new location
         * @param {string} xAuthUser the email address of the user
         * @param {Location} location the location to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocation: function (xAuthUser_1, location_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, location_1], args_1, true), void 0, function (xAuthUser, location, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('createLocation', 'xAuthUser', xAuthUser);
                    // verify required parameter 'location' is not null or undefined
                    (0, common_1.assertParamExists)('createLocation', 'location', location);
                    localVarPath = "/locations";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(location, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieves all locations within a radius of the current location
         * @param {string} xAuthUser the email address of the user
         * @param {LocationArea} locationArea
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNearbyLocations: function (xAuthUser_1, locationArea_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, locationArea_1], args_1, true), void 0, function (xAuthUser, locationArea, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('getNearbyLocations', 'xAuthUser', xAuthUser);
                    // verify required parameter 'locationArea' is not null or undefined
                    (0, common_1.assertParamExists)('getNearbyLocations', 'locationArea', locationArea);
                    localVarPath = "/locations/nearby";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(locationArea, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Updates an existing location name
         * @param {string} xAuthUser the email address of the user
         * @param {string} locationId the ID of the location to be updated
         * @param {PickLocationName} pickLocationName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation: function (xAuthUser_1, locationId_1, pickLocationName_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, locationId_1, pickLocationName_1], args_1, true), void 0, function (xAuthUser, locationId, pickLocationName, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('updateLocation', 'xAuthUser', xAuthUser);
                    // verify required parameter 'locationId' is not null or undefined
                    (0, common_1.assertParamExists)('updateLocation', 'locationId', locationId);
                    // verify required parameter 'pickLocationName' is not null or undefined
                    (0, common_1.assertParamExists)('updateLocation', 'pickLocationName', pickLocationName);
                    localVarPath = "/locations/{locationId}"
                        .replace("{".concat("locationId", "}"), encodeURIComponent(String(locationId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pickLocationName, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.LocationsApiAxiosParamCreator = LocationsApiAxiosParamCreator;
/**
 * LocationsApi - functional programming interface
 * @export
 */
var LocationsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.LocationsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Creates a new location
         * @param {string} xAuthUser the email address of the user
         * @param {Location} location the location to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocation: function (xAuthUser, location, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createLocation(xAuthUser, location, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LocationsApi.createLocation']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieves all locations within a radius of the current location
         * @param {string} xAuthUser the email address of the user
         * @param {LocationArea} locationArea
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNearbyLocations: function (xAuthUser, locationArea, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNearbyLocations(xAuthUser, locationArea, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LocationsApi.getNearbyLocations']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates an existing location name
         * @param {string} xAuthUser the email address of the user
         * @param {string} locationId the ID of the location to be updated
         * @param {PickLocationName} pickLocationName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation: function (xAuthUser, locationId, pickLocationName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateLocation(xAuthUser, locationId, pickLocationName, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LocationsApi.updateLocation']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.LocationsApiFp = LocationsApiFp;
/**
 * LocationsApi - factory interface
 * @export
 */
var LocationsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.LocationsApiFp)(configuration);
    return {
        /**
         *
         * @summary Creates a new location
         * @param {string} xAuthUser the email address of the user
         * @param {Location} location the location to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocation: function (xAuthUser, location, options) {
            return localVarFp.createLocation(xAuthUser, location, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieves all locations within a radius of the current location
         * @param {string} xAuthUser the email address of the user
         * @param {LocationArea} locationArea
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNearbyLocations: function (xAuthUser, locationArea, options) {
            return localVarFp.getNearbyLocations(xAuthUser, locationArea, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates an existing location name
         * @param {string} xAuthUser the email address of the user
         * @param {string} locationId the ID of the location to be updated
         * @param {PickLocationName} pickLocationName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation: function (xAuthUser, locationId, pickLocationName, options) {
            return localVarFp.updateLocation(xAuthUser, locationId, pickLocationName, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LocationsApiFactory = LocationsApiFactory;
/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
var LocationsApi = /** @class */ (function (_super) {
    __extends(LocationsApi, _super);
    function LocationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Creates a new location
     * @param {string} xAuthUser the email address of the user
     * @param {Location} location the location to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.createLocation = function (xAuthUser, location, options) {
        var _this = this;
        return (0, exports.LocationsApiFp)(this.configuration).createLocation(xAuthUser, location, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieves all locations within a radius of the current location
     * @param {string} xAuthUser the email address of the user
     * @param {LocationArea} locationArea
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.getNearbyLocations = function (xAuthUser, locationArea, options) {
        var _this = this;
        return (0, exports.LocationsApiFp)(this.configuration).getNearbyLocations(xAuthUser, locationArea, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates an existing location name
     * @param {string} xAuthUser the email address of the user
     * @param {string} locationId the ID of the location to be updated
     * @param {PickLocationName} pickLocationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.updateLocation = function (xAuthUser, locationId, pickLocationName, options) {
        var _this = this;
        return (0, exports.LocationsApiFp)(this.configuration).updateLocation(xAuthUser, locationId, pickLocationName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LocationsApi;
}(base_1.BaseAPI));
exports.LocationsApi = LocationsApi;
/**
 * ShoppersApi - axios parameter creator
 * @export
 */
var ShoppersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Accepts an invite to a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom the invite will be accepted
         * @param {string} inviteId the ID of the invite to be accepted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptInvite: function (xAuthUser_1, shopperId_1, inviteId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, shopperId_1, inviteId_1], args_1, true), void 0, function (xAuthUser, shopperId, inviteId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('acceptInvite', 'xAuthUser', xAuthUser);
                    // verify required parameter 'shopperId' is not null or undefined
                    (0, common_1.assertParamExists)('acceptInvite', 'shopperId', shopperId);
                    // verify required parameter 'inviteId' is not null or undefined
                    (0, common_1.assertParamExists)('acceptInvite', 'inviteId', inviteId);
                    localVarPath = "/shoppers/{shopperId}/invites/{inviteId}"
                        .replace("{".concat("shopperId", "}"), encodeURIComponent(String(shopperId)))
                        .replace("{".concat("inviteId", "}"), encodeURIComponent(String(inviteId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Creates a new shopper
         * @param {Shopper} shopper the shopper to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShopper: function (shopper_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([shopper_1], args_1, true), void 0, function (shopper, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'shopper' is not null or undefined
                    (0, common_1.assertParamExists)('createShopper', 'shopper', shopper);
                    localVarPath = "/shoppers";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(shopper, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Declines an invite to a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom the invite will be declined
         * @param {string} inviteId the ID of the invite to be declined
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineInvite: function (xAuthUser_1, shopperId_1, inviteId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, shopperId_1, inviteId_1], args_1, true), void 0, function (xAuthUser, shopperId, inviteId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('declineInvite', 'xAuthUser', xAuthUser);
                    // verify required parameter 'shopperId' is not null or undefined
                    (0, common_1.assertParamExists)('declineInvite', 'shopperId', shopperId);
                    // verify required parameter 'inviteId' is not null or undefined
                    (0, common_1.assertParamExists)('declineInvite', 'inviteId', inviteId);
                    localVarPath = "/shoppers/{shopperId}/invites/{inviteId}"
                        .replace("{".concat("shopperId", "}"), encodeURIComponent(String(shopperId)))
                        .replace("{".concat("inviteId", "}"), encodeURIComponent(String(inviteId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieves all of the groups associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom groups will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups: function (xAuthUser_1, shopperId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, shopperId_1], args_1, true), void 0, function (xAuthUser, shopperId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('getGroups', 'xAuthUser', xAuthUser);
                    // verify required parameter 'shopperId' is not null or undefined
                    (0, common_1.assertParamExists)('getGroups', 'shopperId', shopperId);
                    localVarPath = "/shoppers/{shopperId}/groups"
                        .replace("{".concat("shopperId", "}"), encodeURIComponent(String(shopperId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieves all groups that a Shopper has been invited to
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom invites will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvites: function (xAuthUser_1, shopperId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, shopperId_1], args_1, true), void 0, function (xAuthUser, shopperId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('getInvites', 'xAuthUser', xAuthUser);
                    // verify required parameter 'shopperId' is not null or undefined
                    (0, common_1.assertParamExists)('getInvites', 'shopperId', shopperId);
                    localVarPath = "/shoppers/{shopperId}/invites"
                        .replace("{".concat("shopperId", "}"), encodeURIComponent(String(shopperId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieves all lists associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom lists will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLists: function (xAuthUser_1, shopperId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, shopperId_1], args_1, true), void 0, function (xAuthUser, shopperId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('getLists', 'xAuthUser', xAuthUser);
                    // verify required parameter 'shopperId' is not null or undefined
                    (0, common_1.assertParamExists)('getLists', 'shopperId', shopperId);
                    localVarPath = "/shoppers/{shopperId}/lists"
                        .replace("{".concat("shopperId", "}"), encodeURIComponent(String(shopperId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieves all locations associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom locations will be returned
         * @param {number} lookBackDays the number of days to look back for purchases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocations: function (xAuthUser_1, shopperId_1, lookBackDays_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, shopperId_1, lookBackDays_1], args_1, true), void 0, function (xAuthUser, shopperId, lookBackDays, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('getLocations', 'xAuthUser', xAuthUser);
                    // verify required parameter 'shopperId' is not null or undefined
                    (0, common_1.assertParamExists)('getLocations', 'shopperId', shopperId);
                    // verify required parameter 'lookBackDays' is not null or undefined
                    (0, common_1.assertParamExists)('getLocations', 'lookBackDays', lookBackDays);
                    localVarPath = "/shoppers/{shopperId}/locations"
                        .replace("{".concat("shopperId", "}"), encodeURIComponent(String(shopperId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (lookBackDays !== undefined) {
                        localVarQueryParameter['lookBackDays'] = lookBackDays;
                    }
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieves all previously purchased items associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom items will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchasedItems: function (xAuthUser_1, shopperId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, shopperId_1], args_1, true), void 0, function (xAuthUser, shopperId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('getPurchasedItems', 'xAuthUser', xAuthUser);
                    // verify required parameter 'shopperId' is not null or undefined
                    (0, common_1.assertParamExists)('getPurchasedItems', 'shopperId', shopperId);
                    localVarPath = "/shoppers/{shopperId}/items"
                        .replace("{".concat("shopperId", "}"), encodeURIComponent(String(shopperId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieves a shopper by ID
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId The ID of the shopper to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveShopper: function (xAuthUser_1, shopperId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, shopperId_1], args_1, true), void 0, function (xAuthUser, shopperId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('retrieveShopper', 'xAuthUser', xAuthUser);
                    // verify required parameter 'shopperId' is not null or undefined
                    (0, common_1.assertParamExists)('retrieveShopper', 'shopperId', shopperId);
                    localVarPath = "/shoppers/{shopperId}"
                        .replace("{".concat("shopperId", "}"), encodeURIComponent(String(shopperId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Updates an existing shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper to be updated
         * @param {Shopper} shopper the updated shopper properties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShopper: function (xAuthUser_1, shopperId_1, shopper_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xAuthUser_1, shopperId_1, shopper_1], args_1, true), void 0, function (xAuthUser, shopperId, shopper, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'xAuthUser' is not null or undefined
                    (0, common_1.assertParamExists)('updateShopper', 'xAuthUser', xAuthUser);
                    // verify required parameter 'shopperId' is not null or undefined
                    (0, common_1.assertParamExists)('updateShopper', 'shopperId', shopperId);
                    // verify required parameter 'shopper' is not null or undefined
                    (0, common_1.assertParamExists)('updateShopper', 'shopper', shopper);
                    localVarPath = "/shoppers/{shopperId}"
                        .replace("{".concat("shopperId", "}"), encodeURIComponent(String(shopperId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    if (xAuthUser != null) {
                        localVarHeaderParameter['X-Auth-User'] = String(xAuthUser);
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(shopper, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ShoppersApiAxiosParamCreator = ShoppersApiAxiosParamCreator;
/**
 * ShoppersApi - functional programming interface
 * @export
 */
var ShoppersApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ShoppersApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Accepts an invite to a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom the invite will be accepted
         * @param {string} inviteId the ID of the invite to be accepted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptInvite: function (xAuthUser, shopperId, inviteId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.acceptInvite(xAuthUser, shopperId, inviteId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ShoppersApi.acceptInvite']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates a new shopper
         * @param {Shopper} shopper the shopper to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShopper: function (shopper, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createShopper(shopper, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ShoppersApi.createShopper']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Declines an invite to a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom the invite will be declined
         * @param {string} inviteId the ID of the invite to be declined
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineInvite: function (xAuthUser, shopperId, inviteId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.declineInvite(xAuthUser, shopperId, inviteId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ShoppersApi.declineInvite']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieves all of the groups associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom groups will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups: function (xAuthUser, shopperId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getGroups(xAuthUser, shopperId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ShoppersApi.getGroups']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieves all groups that a Shopper has been invited to
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom invites will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvites: function (xAuthUser, shopperId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getInvites(xAuthUser, shopperId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ShoppersApi.getInvites']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieves all lists associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom lists will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLists: function (xAuthUser, shopperId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLists(xAuthUser, shopperId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ShoppersApi.getLists']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieves all locations associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom locations will be returned
         * @param {number} lookBackDays the number of days to look back for purchases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocations: function (xAuthUser, shopperId, lookBackDays, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLocations(xAuthUser, shopperId, lookBackDays, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ShoppersApi.getLocations']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieves all previously purchased items associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom items will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchasedItems: function (xAuthUser, shopperId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPurchasedItems(xAuthUser, shopperId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ShoppersApi.getPurchasedItems']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieves a shopper by ID
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId The ID of the shopper to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveShopper: function (xAuthUser, shopperId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.retrieveShopper(xAuthUser, shopperId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ShoppersApi.retrieveShopper']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Updates an existing shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper to be updated
         * @param {Shopper} shopper the updated shopper properties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShopper: function (xAuthUser, shopperId, shopper, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateShopper(xAuthUser, shopperId, shopper, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ShoppersApi.updateShopper']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ShoppersApiFp = ShoppersApiFp;
/**
 * ShoppersApi - factory interface
 * @export
 */
var ShoppersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ShoppersApiFp)(configuration);
    return {
        /**
         *
         * @summary Accepts an invite to a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom the invite will be accepted
         * @param {string} inviteId the ID of the invite to be accepted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptInvite: function (xAuthUser, shopperId, inviteId, options) {
            return localVarFp.acceptInvite(xAuthUser, shopperId, inviteId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Creates a new shopper
         * @param {Shopper} shopper the shopper to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShopper: function (shopper, options) {
            return localVarFp.createShopper(shopper, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Declines an invite to a group
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom the invite will be declined
         * @param {string} inviteId the ID of the invite to be declined
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineInvite: function (xAuthUser, shopperId, inviteId, options) {
            return localVarFp.declineInvite(xAuthUser, shopperId, inviteId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieves all of the groups associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom groups will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups: function (xAuthUser, shopperId, options) {
            return localVarFp.getGroups(xAuthUser, shopperId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieves all groups that a Shopper has been invited to
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom invites will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvites: function (xAuthUser, shopperId, options) {
            return localVarFp.getInvites(xAuthUser, shopperId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieves all lists associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom lists will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLists: function (xAuthUser, shopperId, options) {
            return localVarFp.getLists(xAuthUser, shopperId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieves all locations associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom locations will be returned
         * @param {number} lookBackDays the number of days to look back for purchases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocations: function (xAuthUser, shopperId, lookBackDays, options) {
            return localVarFp.getLocations(xAuthUser, shopperId, lookBackDays, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieves all previously purchased items associated with a Shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper for whom items will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchasedItems: function (xAuthUser, shopperId, options) {
            return localVarFp.getPurchasedItems(xAuthUser, shopperId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieves a shopper by ID
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId The ID of the shopper to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveShopper: function (xAuthUser, shopperId, options) {
            return localVarFp.retrieveShopper(xAuthUser, shopperId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Updates an existing shopper
         * @param {string} xAuthUser the email address of the user
         * @param {string} shopperId the ID of the shopper to be updated
         * @param {Shopper} shopper the updated shopper properties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShopper: function (xAuthUser, shopperId, shopper, options) {
            return localVarFp.updateShopper(xAuthUser, shopperId, shopper, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ShoppersApiFactory = ShoppersApiFactory;
/**
 * ShoppersApi - object-oriented interface
 * @export
 * @class ShoppersApi
 * @extends {BaseAPI}
 */
var ShoppersApi = /** @class */ (function (_super) {
    __extends(ShoppersApi, _super);
    function ShoppersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Accepts an invite to a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom the invite will be accepted
     * @param {string} inviteId the ID of the invite to be accepted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    ShoppersApi.prototype.acceptInvite = function (xAuthUser, shopperId, inviteId, options) {
        var _this = this;
        return (0, exports.ShoppersApiFp)(this.configuration).acceptInvite(xAuthUser, shopperId, inviteId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Creates a new shopper
     * @param {Shopper} shopper the shopper to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    ShoppersApi.prototype.createShopper = function (shopper, options) {
        var _this = this;
        return (0, exports.ShoppersApiFp)(this.configuration).createShopper(shopper, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Declines an invite to a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom the invite will be declined
     * @param {string} inviteId the ID of the invite to be declined
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    ShoppersApi.prototype.declineInvite = function (xAuthUser, shopperId, inviteId, options) {
        var _this = this;
        return (0, exports.ShoppersApiFp)(this.configuration).declineInvite(xAuthUser, shopperId, inviteId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieves all of the groups associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom groups will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    ShoppersApi.prototype.getGroups = function (xAuthUser, shopperId, options) {
        var _this = this;
        return (0, exports.ShoppersApiFp)(this.configuration).getGroups(xAuthUser, shopperId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieves all groups that a Shopper has been invited to
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom invites will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    ShoppersApi.prototype.getInvites = function (xAuthUser, shopperId, options) {
        var _this = this;
        return (0, exports.ShoppersApiFp)(this.configuration).getInvites(xAuthUser, shopperId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieves all lists associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom lists will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    ShoppersApi.prototype.getLists = function (xAuthUser, shopperId, options) {
        var _this = this;
        return (0, exports.ShoppersApiFp)(this.configuration).getLists(xAuthUser, shopperId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieves all locations associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom locations will be returned
     * @param {number} lookBackDays the number of days to look back for purchases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    ShoppersApi.prototype.getLocations = function (xAuthUser, shopperId, lookBackDays, options) {
        var _this = this;
        return (0, exports.ShoppersApiFp)(this.configuration).getLocations(xAuthUser, shopperId, lookBackDays, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieves all previously purchased items associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom items will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    ShoppersApi.prototype.getPurchasedItems = function (xAuthUser, shopperId, options) {
        var _this = this;
        return (0, exports.ShoppersApiFp)(this.configuration).getPurchasedItems(xAuthUser, shopperId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieves a shopper by ID
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId The ID of the shopper to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    ShoppersApi.prototype.retrieveShopper = function (xAuthUser, shopperId, options) {
        var _this = this;
        return (0, exports.ShoppersApiFp)(this.configuration).retrieveShopper(xAuthUser, shopperId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Updates an existing shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper to be updated
     * @param {Shopper} shopper the updated shopper properties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    ShoppersApi.prototype.updateShopper = function (xAuthUser, shopperId, shopper, options) {
        var _this = this;
        return (0, exports.ShoppersApiFp)(this.configuration).updateShopper(xAuthUser, shopperId, shopper, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ShoppersApi;
}(base_1.BaseAPI));
exports.ShoppersApi = ShoppersApi;
