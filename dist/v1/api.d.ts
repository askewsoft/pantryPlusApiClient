/**
 * pantryplus-api
 * This is the API layer for the PantryPlus mobile app
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 * A category is a grouping of related items within a list.
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * UUID representation of the category\'s ID
     * @type {string}
     * @memberof Category
     */
    'id': string;
    /**
     * The name of the category
     * @type {string}
     * @memberof Category
     */
    'name': string;
    /**
     * The list to which the category belongs
     * @type {string}
     * @memberof Category
     */
    'listId': string;
    /**
     * The ordinal of the category
     * @type {number}
     * @memberof Category
     */
    'ordinal': number;
}
/**
 *
 * @export
 * @interface GetListItemsCount200Response
 */
export interface GetListItemsCount200Response {
    /**
     *
     * @type {number}
     * @memberof GetListItemsCount200Response
     */
    'count': number;
}
/**
 * A Group is a user generated collection of Shoppers.
 * @export
 * @interface Group
 */
export interface Group {
    /**
     *
     * @type {Shopper}
     * @memberof Group
     */
    'owner': Shopper;
    /**
     * The name of the group
     * @type {string}
     * @memberof Group
     */
    'name': string;
    /**
     * UUID representation of the group\'s ID
     * @type {string}
     * @memberof Group
     */
    'id': string;
}
/**
 * An Item is something a user may purchase.
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * UUID representation of the item\'s ID
     * @type {string}
     * @memberof Item
     */
    'id': string;
    /**
     * The name of the item
     * @type {string}
     * @memberof Item
     */
    'name': string;
    /**
     * The universal product code of the item
     * @type {string}
     * @memberof Item
     */
    'upc'?: string;
}
/**
 * A List is a grouping of items.
 * @export
 * @interface List
 */
export interface List {
    /**
     * UUID representation of the list\'s ID
     * @type {string}
     * @memberof List
     */
    'id': string;
    /**
     * The name of the list
     * @type {string}
     * @memberof List
     */
    'name': string;
    /**
     * The shopper that originally created the list
     * @type {string}
     * @memberof List
     */
    'ownerId': string;
    /**
     * The group of users with whom this list is shared
     * @type {string}
     * @memberof List
     */
    'groupId'?: string;
    /**
     * The ordinal of the list
     * @type {number}
     * @memberof List
     */
    'ordinal': number;
}
/**
 * The location of a store at which items may be purchased. GEO_LOCATION is a POINT(longitude, latitude) example: POINT(-71.44508663777015, 42.71299408793443)
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * UUID representation of the location\'s ID
     * @type {string}
     * @memberof Location
     */
    'id': string;
    /**
     * The name of the location
     * @type {string}
     * @memberof Location
     */
    'name': string;
    /**
     * The latitude of the user\'s current location
     * @type {number}
     * @memberof Location
     */
    'latitude': number;
    /**
     * The longitude of the user\'s current location
     * @type {number}
     * @memberof Location
     */
    'longitude': number;
}
/**
 *
 * @export
 * @interface LocationArea
 */
export interface LocationArea {
    /**
     * The latitude of the user\'s current location
     * @type {number}
     * @memberof LocationArea
     */
    'latitude': number;
    /**
     * The longitude of the user\'s current location
     * @type {number}
     * @memberof LocationArea
     */
    'longitude': number;
    /**
     * The radius of the search
     * @type {number}
     * @memberof LocationArea
     */
    'radius': number;
}
/**
 *
 * @export
 * @interface NearbyLocation
 */
export interface NearbyLocation {
    /**
     * UUID representation of the location\'s ID
     * @type {string}
     * @memberof NearbyLocation
     */
    'id': string;
    /**
     * The name of the location
     * @type {string}
     * @memberof NearbyLocation
     */
    'name': string;
    /**
     * The latitude of the user\'s current location
     * @type {number}
     * @memberof NearbyLocation
     */
    'latitude': number;
    /**
     * The longitude of the user\'s current location
     * @type {number}
     * @memberof NearbyLocation
     */
    'longitude': number;
    /**
     * The distance from the user\'s current location to the location
     * @type {number}
     * @memberof NearbyLocation
     */
    'distance': number;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickCategoryNameOrOrdinal
 */
export interface PickCategoryNameOrOrdinal {
    /**
     * The name of the category
     * @type {string}
     * @memberof PickCategoryNameOrOrdinal
     */
    'name': string;
    /**
     * The ordinal of the category
     * @type {number}
     * @memberof PickCategoryNameOrOrdinal
     */
    'ordinal': number;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickGroupIdOrNameOrOwner
 */
export interface PickGroupIdOrNameOrOwner {
    /**
     * UUID representation of the group\'s ID
     * @type {string}
     * @memberof PickGroupIdOrNameOrOwner
     */
    'id': string;
    /**
     * The name of the group
     * @type {string}
     * @memberof PickGroupIdOrNameOrOwner
     */
    'name': string;
    /**
     *
     * @type {Shopper}
     * @memberof PickGroupIdOrNameOrOwner
     */
    'owner': Shopper;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickGroupName
 */
export interface PickGroupName {
    /**
     * The name of the group
     * @type {string}
     * @memberof PickGroupName
     */
    'name': string;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickGroupNameOrId
 */
export interface PickGroupNameOrId {
    /**
     * UUID representation of the group\'s ID
     * @type {string}
     * @memberof PickGroupNameOrId
     */
    'id': string;
    /**
     * The name of the group
     * @type {string}
     * @memberof PickGroupNameOrId
     */
    'name': string;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickItemNameOrUpc
 */
export interface PickItemNameOrUpc {
    /**
     * The name of the item
     * @type {string}
     * @memberof PickItemNameOrUpc
     */
    'name': string;
    /**
     * The universal product code of the item
     * @type {string}
     * @memberof PickItemNameOrUpc
     */
    'upc'?: string;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickListNameOrGroupIdOrOrdinal
 */
export interface PickListNameOrGroupIdOrOrdinal {
    /**
     * The name of the list
     * @type {string}
     * @memberof PickListNameOrGroupIdOrOrdinal
     */
    'name': string;
    /**
     * The group of users with whom this list is shared
     * @type {string}
     * @memberof PickListNameOrGroupIdOrOrdinal
     */
    'groupId'?: string;
    /**
     * The ordinal of the list
     * @type {number}
     * @memberof PickListNameOrGroupIdOrOrdinal
     */
    'ordinal': number;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickLocationId
 */
export interface PickLocationId {
    /**
     * UUID representation of the location\'s ID
     * @type {string}
     * @memberof PickLocationId
     */
    'id': string;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickLocationName
 */
export interface PickLocationName {
    /**
     * The name of the location
     * @type {string}
     * @memberof PickLocationName
     */
    'name': string;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickShopperEmail
 */
export interface PickShopperEmail {
    /**
     * The email of the shopper
     * @type {string}
     * @memberof PickShopperEmail
     */
    'email': string;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickShopperId
 */
export interface PickShopperId {
    /**
     * UUID representation of the shopper\'s ID
     * @type {string}
     * @memberof PickShopperId
     */
    'id': string;
}
/**
 *
 * @export
 * @interface RecentLocation
 */
export interface RecentLocation {
    /**
     * UUID representation of the location\'s ID
     * @type {string}
     * @memberof RecentLocation
     */
    'id': string;
    /**
     * The name of the location
     * @type {string}
     * @memberof RecentLocation
     */
    'name': string;
    /**
     * The latitude of the user\'s current location
     * @type {number}
     * @memberof RecentLocation
     */
    'latitude': number;
    /**
     * The longitude of the user\'s current location
     * @type {number}
     * @memberof RecentLocation
     */
    'longitude': number;
    /**
     * The date of the purchase
     * @type {string}
     * @memberof RecentLocation
     */
    'lastPurchaseDate': string;
}
/**
 * A Shopper is a user who has an account with us.
 * @export
 * @interface Shopper
 */
export interface Shopper {
    /**
     * UUID representation of the shopper\'s ID
     * @type {string}
     * @memberof Shopper
     */
    'id': string;
    /**
     * The nickname of the shopper
     * @type {string}
     * @memberof Shopper
     */
    'nickname': string;
    /**
     * The email of the shopper
     * @type {string}
     * @memberof Shopper
     */
    'email': string;
}
/**
 * an object containing the date of purchase
 * @export
 * @interface UnpurchaseItemRequest
 */
export interface UnpurchaseItemRequest {
    /**
     *
     * @type {string}
     * @memberof UnpurchaseItemRequest
     */
    'purchaseDate': string;
}
/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export declare const CategoriesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Associates an item with a category
     * @param {string} xAuthUser the email address of the user
     * @param {string} categoryId the ID of the category
     * @param {string} itemId the ID of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToCategory: (xAuthUser: string, categoryId: string, itemId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets the items in a category
     * @param {string} xAuthUser the email address of the user
     * @param {string} categoryId the ID of the category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategoryItems: (xAuthUser: string, categoryId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Removes an item from a category
     * @param {string} xAuthUser the email address of the user
     * @param {string} categoryId the ID of the category
     * @param {string} itemId the ID of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItemFromCategory: (xAuthUser: string, categoryId: string, itemId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a category
     * @param {string} xAuthUser the email of the user
     * @param {string} xAuthLocation the ID of the user\&#39;s nearest store location
     * @param {string} categoryId the ID of the category
     * @param {PickCategoryNameOrOrdinal} pickCategoryNameOrOrdinal an object containing the new name and ordinal of the category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategory: (xAuthUser: string, xAuthLocation: string, categoryId: string, pickCategoryNameOrOrdinal: PickCategoryNameOrOrdinal, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CategoriesApi - functional programming interface
 * @export
 */
export declare const CategoriesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Associates an item with a category
     * @param {string} xAuthUser the email address of the user
     * @param {string} categoryId the ID of the category
     * @param {string} itemId the ID of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToCategory(xAuthUser: string, categoryId: string, itemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Gets the items in a category
     * @param {string} xAuthUser the email address of the user
     * @param {string} categoryId the ID of the category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategoryItems(xAuthUser: string, categoryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Item>>>;
    /**
     *
     * @summary Removes an item from a category
     * @param {string} xAuthUser the email address of the user
     * @param {string} categoryId the ID of the category
     * @param {string} itemId the ID of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItemFromCategory(xAuthUser: string, categoryId: string, itemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Updates a category
     * @param {string} xAuthUser the email of the user
     * @param {string} xAuthLocation the ID of the user\&#39;s nearest store location
     * @param {string} categoryId the ID of the category
     * @param {PickCategoryNameOrOrdinal} pickCategoryNameOrOrdinal an object containing the new name and ordinal of the category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategory(xAuthUser: string, xAuthLocation: string, categoryId: string, pickCategoryNameOrOrdinal: PickCategoryNameOrOrdinal, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * CategoriesApi - factory interface
 * @export
 */
export declare const CategoriesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Associates an item with a category
     * @param {string} xAuthUser the email address of the user
     * @param {string} categoryId the ID of the category
     * @param {string} itemId the ID of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemToCategory(xAuthUser: string, categoryId: string, itemId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Gets the items in a category
     * @param {string} xAuthUser the email address of the user
     * @param {string} categoryId the ID of the category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategoryItems(xAuthUser: string, categoryId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Item>>;
    /**
     *
     * @summary Removes an item from a category
     * @param {string} xAuthUser the email address of the user
     * @param {string} categoryId the ID of the category
     * @param {string} itemId the ID of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItemFromCategory(xAuthUser: string, categoryId: string, itemId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Updates a category
     * @param {string} xAuthUser the email of the user
     * @param {string} xAuthLocation the ID of the user\&#39;s nearest store location
     * @param {string} categoryId the ID of the category
     * @param {PickCategoryNameOrOrdinal} pickCategoryNameOrOrdinal an object containing the new name and ordinal of the category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategory(xAuthUser: string, xAuthLocation: string, categoryId: string, pickCategoryNameOrOrdinal: PickCategoryNameOrOrdinal, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export declare class CategoriesApi extends BaseAPI {
    /**
     *
     * @summary Associates an item with a category
     * @param {string} xAuthUser the email address of the user
     * @param {string} categoryId the ID of the category
     * @param {string} itemId the ID of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    addItemToCategory(xAuthUser: string, categoryId: string, itemId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Gets the items in a category
     * @param {string} xAuthUser the email address of the user
     * @param {string} categoryId the ID of the category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    getCategoryItems(xAuthUser: string, categoryId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Item[], any>>;
    /**
     *
     * @summary Removes an item from a category
     * @param {string} xAuthUser the email address of the user
     * @param {string} categoryId the ID of the category
     * @param {string} itemId the ID of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    removeItemFromCategory(xAuthUser: string, categoryId: string, itemId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Updates a category
     * @param {string} xAuthUser the email of the user
     * @param {string} xAuthLocation the ID of the user\&#39;s nearest store location
     * @param {string} categoryId the ID of the category
     * @param {PickCategoryNameOrOrdinal} pickCategoryNameOrOrdinal an object containing the new name and ordinal of the category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    updateCategory(xAuthUser: string, xAuthLocation: string, categoryId: string, pickCategoryNameOrOrdinal: PickCategoryNameOrOrdinal, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export declare const GroupsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Adds a shopper to a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickShopperId} pickShopperId an object containing the ID of the shopper to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addShopperToGroup: (xAuthUser: string, groupId: string, pickShopperId: PickShopperId, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new group of shoppers
     * @param {string} xAuthUser the email address of the user
     * @param {PickGroupNameOrId} pickGroupNameOrId an object containing the name and ID of the group to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup: (xAuthUser: string, pickGroupNameOrId: PickGroupNameOrId, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup: (xAuthUser: string, groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup: (xAuthUser: string, groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets all shoppers in an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupShoppers: (xAuthUser: string, groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets all invitees for a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvitees: (xAuthUser: string, groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Invites a shopper to join a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickShopperEmail} pickShopperEmail an object containing the email address of the shopper to be invited
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteShopper: (xAuthUser: string, groupId: string, pickShopperEmail: PickShopperEmail, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Removes a shopper from a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {string} shopperId the ID of the shopper to be removed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeShopperFromGroup: (xAuthUser: string, groupId: string, shopperId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Uninvites a shopper from a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickShopperEmail} pickShopperEmail an object containing the email address of the shopper to be uninvited
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uninviteShopper: (xAuthUser: string, groupId: string, pickShopperEmail: PickShopperEmail, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing group name
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickGroupName} pickGroupName an object containing the new name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroupName: (xAuthUser: string, groupId: string, pickGroupName: PickGroupName, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GroupsApi - functional programming interface
 * @export
 */
export declare const GroupsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Adds a shopper to a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickShopperId} pickShopperId an object containing the ID of the shopper to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addShopperToGroup(xAuthUser: string, groupId: string, pickShopperId: PickShopperId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Creates a new group of shoppers
     * @param {string} xAuthUser the email address of the user
     * @param {PickGroupNameOrId} pickGroupNameOrId an object containing the name and ID of the group to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(xAuthUser: string, pickGroupNameOrId: PickGroupNameOrId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Deletes an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(xAuthUser: string, groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Gets an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(xAuthUser: string, groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PickGroupIdOrNameOrOwner>>;
    /**
     *
     * @summary Gets all shoppers in an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupShoppers(xAuthUser: string, groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Shopper>>>;
    /**
     *
     * @summary Gets all invitees for a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvitees(xAuthUser: string, groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PickShopperEmail>>>;
    /**
     *
     * @summary Invites a shopper to join a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickShopperEmail} pickShopperEmail an object containing the email address of the shopper to be invited
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteShopper(xAuthUser: string, groupId: string, pickShopperEmail: PickShopperEmail, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Removes a shopper from a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {string} shopperId the ID of the shopper to be removed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeShopperFromGroup(xAuthUser: string, groupId: string, shopperId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Uninvites a shopper from a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickShopperEmail} pickShopperEmail an object containing the email address of the shopper to be uninvited
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uninviteShopper(xAuthUser: string, groupId: string, pickShopperEmail: PickShopperEmail, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Updates an existing group name
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickGroupName} pickGroupName an object containing the new name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroupName(xAuthUser: string, groupId: string, pickGroupName: PickGroupName, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * GroupsApi - factory interface
 * @export
 */
export declare const GroupsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Adds a shopper to a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickShopperId} pickShopperId an object containing the ID of the shopper to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addShopperToGroup(xAuthUser: string, groupId: string, pickShopperId: PickShopperId, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Creates a new group of shoppers
     * @param {string} xAuthUser the email address of the user
     * @param {PickGroupNameOrId} pickGroupNameOrId an object containing the name and ID of the group to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(xAuthUser: string, pickGroupNameOrId: PickGroupNameOrId, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Deletes an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(xAuthUser: string, groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Gets an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(xAuthUser: string, groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<PickGroupIdOrNameOrOwner>;
    /**
     *
     * @summary Gets all shoppers in an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupShoppers(xAuthUser: string, groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Shopper>>;
    /**
     *
     * @summary Gets all invitees for a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvitees(xAuthUser: string, groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PickShopperEmail>>;
    /**
     *
     * @summary Invites a shopper to join a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickShopperEmail} pickShopperEmail an object containing the email address of the shopper to be invited
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteShopper(xAuthUser: string, groupId: string, pickShopperEmail: PickShopperEmail, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Removes a shopper from a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {string} shopperId the ID of the shopper to be removed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeShopperFromGroup(xAuthUser: string, groupId: string, shopperId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Uninvites a shopper from a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickShopperEmail} pickShopperEmail an object containing the email address of the shopper to be uninvited
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uninviteShopper(xAuthUser: string, groupId: string, pickShopperEmail: PickShopperEmail, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Updates an existing group name
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickGroupName} pickGroupName an object containing the new name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroupName(xAuthUser: string, groupId: string, pickGroupName: PickGroupName, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export declare class GroupsApi extends BaseAPI {
    /**
     *
     * @summary Adds a shopper to a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickShopperId} pickShopperId an object containing the ID of the shopper to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    addShopperToGroup(xAuthUser: string, groupId: string, pickShopperId: PickShopperId, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Creates a new group of shoppers
     * @param {string} xAuthUser the email address of the user
     * @param {PickGroupNameOrId} pickGroupNameOrId an object containing the name and ID of the group to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    createGroup(xAuthUser: string, pickGroupNameOrId: PickGroupNameOrId, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Deletes an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    deleteGroup(xAuthUser: string, groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Gets an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    getGroup(xAuthUser: string, groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickGroupIdOrNameOrOwner, any>>;
    /**
     *
     * @summary Gets all shoppers in an existing group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    getGroupShoppers(xAuthUser: string, groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Shopper[], any>>;
    /**
     *
     * @summary Gets all invitees for a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    getInvitees(xAuthUser: string, groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickShopperEmail[], any>>;
    /**
     *
     * @summary Invites a shopper to join a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickShopperEmail} pickShopperEmail an object containing the email address of the shopper to be invited
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    inviteShopper(xAuthUser: string, groupId: string, pickShopperEmail: PickShopperEmail, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Removes a shopper from a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {string} shopperId the ID of the shopper to be removed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    removeShopperFromGroup(xAuthUser: string, groupId: string, shopperId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Uninvites a shopper from a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickShopperEmail} pickShopperEmail an object containing the email address of the shopper to be uninvited
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    uninviteShopper(xAuthUser: string, groupId: string, pickShopperEmail: PickShopperEmail, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Updates an existing group name
     * @param {string} xAuthUser the email address of the user
     * @param {string} groupId the ID of the group to be updated
     * @param {PickGroupName} pickGroupName an object containing the new name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    updateGroupName(xAuthUser: string, groupId: string, pickGroupName: PickGroupName, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * ItemsApi - axios parameter creator
 * @export
 */
export declare const ItemsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates an item
     * @param {string} xAuthUser
     * @param {Item} item an object containing the ID, name, and UPC of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createItem: (xAuthUser: string, item: Item, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an item
     * @param {string} xAuthUser
     * @param {string} itemId the ID of the item
     * @param {PickItemNameOrUpc} pickItemNameOrUpc an object containing the new name and UPC of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItem: (xAuthUser: string, itemId: string, pickItemNameOrUpc: PickItemNameOrUpc, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ItemsApi - functional programming interface
 * @export
 */
export declare const ItemsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates an item
     * @param {string} xAuthUser
     * @param {Item} item an object containing the ID, name, and UPC of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createItem(xAuthUser: string, item: Item, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Updates an item
     * @param {string} xAuthUser
     * @param {string} itemId the ID of the item
     * @param {PickItemNameOrUpc} pickItemNameOrUpc an object containing the new name and UPC of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItem(xAuthUser: string, itemId: string, pickItemNameOrUpc: PickItemNameOrUpc, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ItemsApi - factory interface
 * @export
 */
export declare const ItemsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Creates an item
     * @param {string} xAuthUser
     * @param {Item} item an object containing the ID, name, and UPC of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createItem(xAuthUser: string, item: Item, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Updates an item
     * @param {string} xAuthUser
     * @param {string} itemId the ID of the item
     * @param {PickItemNameOrUpc} pickItemNameOrUpc an object containing the new name and UPC of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItem(xAuthUser: string, itemId: string, pickItemNameOrUpc: PickItemNameOrUpc, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * ItemsApi - object-oriented interface
 * @export
 * @class ItemsApi
 * @extends {BaseAPI}
 */
export declare class ItemsApi extends BaseAPI {
    /**
     *
     * @summary Creates an item
     * @param {string} xAuthUser
     * @param {Item} item an object containing the ID, name, and UPC of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    createItem(xAuthUser: string, item: Item, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Updates an item
     * @param {string} xAuthUser
     * @param {string} itemId the ID of the item
     * @param {PickItemNameOrUpc} pickItemNameOrUpc an object containing the new name and UPC of the item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    updateItem(xAuthUser: string, itemId: string, pickItemNameOrUpc: PickItemNameOrUpc, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * ListsApi - axios parameter creator
 * @export
 */
export declare const ListsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Associates an item with a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to associate with the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItem: (xAuthUser: string, listId: string, itemId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Adds a category to a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the user\&#39;s nearest store location
     * @param {string} listId the ID of the list
     * @param {Category} category the category to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCategory: (xAuthUser: string, xAuthLocation: string, listId: string, category: Category, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new list of items
     * @param {string} xAuthUser the email address of the user
     * @param {List} list the list to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createList: (xAuthUser: string, list: List, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a list of items
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteList: (xAuthUser: string, listId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves the categories for a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategories: (xAuthUser: string, xAuthLocation: string, listId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves the uncategorized items for a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListItems: (xAuthUser: string, listId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves the count of unpurchased items for a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListItemsCount: (xAuthUser: string, listId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Purchases an item on a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to purchase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchaseItem: (xAuthUser: string, xAuthLocation: string, listId: string, itemId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Removes a category from a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} categoryId the ID of the category to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCategory: (xAuthUser: string, listId: string, categoryId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Removes an item from a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItem: (xAuthUser: string, listId: string, itemId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Removes the purchase of an item from purchase history
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to remove
     * @param {UnpurchaseItemRequest} unpurchaseItemRequest an object containing the date of purchase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unpurchaseItem: (xAuthUser: string, xAuthLocation: string, listId: string, itemId: string, unpurchaseItemRequest: UnpurchaseItemRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {PickListNameOrGroupIdOrOrdinal} pickListNameOrGroupIdOrOrdinal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateList: (xAuthUser: string, listId: string, pickListNameOrGroupIdOrOrdinal: PickListNameOrGroupIdOrOrdinal, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ListsApi - functional programming interface
 * @export
 */
export declare const ListsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Associates an item with a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to associate with the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItem(xAuthUser: string, listId: string, itemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Adds a category to a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the user\&#39;s nearest store location
     * @param {string} listId the ID of the list
     * @param {Category} category the category to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCategory(xAuthUser: string, xAuthLocation: string, listId: string, category: Category, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Creates a new list of items
     * @param {string} xAuthUser the email address of the user
     * @param {List} list the list to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createList(xAuthUser: string, list: List, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Deletes a list of items
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteList(xAuthUser: string, listId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves the categories for a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategories(xAuthUser: string, xAuthLocation: string, listId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>>;
    /**
     *
     * @summary Retrieves the uncategorized items for a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListItems(xAuthUser: string, listId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Item>>>;
    /**
     *
     * @summary Retrieves the count of unpurchased items for a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListItemsCount(xAuthUser: string, listId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListItemsCount200Response>>;
    /**
     *
     * @summary Purchases an item on a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to purchase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchaseItem(xAuthUser: string, xAuthLocation: string, listId: string, itemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Removes a category from a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} categoryId the ID of the category to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCategory(xAuthUser: string, listId: string, categoryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Removes an item from a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItem(xAuthUser: string, listId: string, itemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Removes the purchase of an item from purchase history
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to remove
     * @param {UnpurchaseItemRequest} unpurchaseItemRequest an object containing the date of purchase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unpurchaseItem(xAuthUser: string, xAuthLocation: string, listId: string, itemId: string, unpurchaseItemRequest: UnpurchaseItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Updates a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {PickListNameOrGroupIdOrOrdinal} pickListNameOrGroupIdOrOrdinal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateList(xAuthUser: string, listId: string, pickListNameOrGroupIdOrOrdinal: PickListNameOrGroupIdOrOrdinal, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ListsApi - factory interface
 * @export
 */
export declare const ListsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Associates an item with a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to associate with the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItem(xAuthUser: string, listId: string, itemId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Adds a category to a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the user\&#39;s nearest store location
     * @param {string} listId the ID of the list
     * @param {Category} category the category to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCategory(xAuthUser: string, xAuthLocation: string, listId: string, category: Category, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Creates a new list of items
     * @param {string} xAuthUser the email address of the user
     * @param {List} list the list to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createList(xAuthUser: string, list: List, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Deletes a list of items
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteList(xAuthUser: string, listId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves the categories for a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategories(xAuthUser: string, xAuthLocation: string, listId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Category>>;
    /**
     *
     * @summary Retrieves the uncategorized items for a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListItems(xAuthUser: string, listId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Item>>;
    /**
     *
     * @summary Retrieves the count of unpurchased items for a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListItemsCount(xAuthUser: string, listId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetListItemsCount200Response>;
    /**
     *
     * @summary Purchases an item on a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to purchase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchaseItem(xAuthUser: string, xAuthLocation: string, listId: string, itemId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Removes a category from a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} categoryId the ID of the category to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCategory(xAuthUser: string, listId: string, categoryId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Removes an item from a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeItem(xAuthUser: string, listId: string, itemId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Removes the purchase of an item from purchase history
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to remove
     * @param {UnpurchaseItemRequest} unpurchaseItemRequest an object containing the date of purchase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unpurchaseItem(xAuthUser: string, xAuthLocation: string, listId: string, itemId: string, unpurchaseItemRequest: UnpurchaseItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Updates a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {PickListNameOrGroupIdOrOrdinal} pickListNameOrGroupIdOrOrdinal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateList(xAuthUser: string, listId: string, pickListNameOrGroupIdOrOrdinal: PickListNameOrGroupIdOrOrdinal, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * ListsApi - object-oriented interface
 * @export
 * @class ListsApi
 * @extends {BaseAPI}
 */
export declare class ListsApi extends BaseAPI {
    /**
     *
     * @summary Associates an item with a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to associate with the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    addItem(xAuthUser: string, listId: string, itemId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Adds a category to a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the user\&#39;s nearest store location
     * @param {string} listId the ID of the list
     * @param {Category} category the category to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    createCategory(xAuthUser: string, xAuthLocation: string, listId: string, category: Category, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Creates a new list of items
     * @param {string} xAuthUser the email address of the user
     * @param {List} list the list to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    createList(xAuthUser: string, list: List, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Deletes a list of items
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    deleteList(xAuthUser: string, listId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves the categories for a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    getCategories(xAuthUser: string, xAuthLocation: string, listId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Category[], any>>;
    /**
     *
     * @summary Retrieves the uncategorized items for a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    getListItems(xAuthUser: string, listId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Item[], any>>;
    /**
     *
     * @summary Retrieves the count of unpurchased items for a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    getListItemsCount(xAuthUser: string, listId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetListItemsCount200Response, any>>;
    /**
     *
     * @summary Purchases an item on a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to purchase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    purchaseItem(xAuthUser: string, xAuthLocation: string, listId: string, itemId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Removes a category from a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} categoryId the ID of the category to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    removeCategory(xAuthUser: string, listId: string, categoryId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Removes an item from a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    removeItem(xAuthUser: string, listId: string, itemId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Removes the purchase of an item from purchase history
     * @param {string} xAuthUser the email address of the user
     * @param {string} xAuthLocation the ID of the location
     * @param {string} listId the ID of the list
     * @param {string} itemId the ID of the item to remove
     * @param {UnpurchaseItemRequest} unpurchaseItemRequest an object containing the date of purchase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    unpurchaseItem(xAuthUser: string, xAuthLocation: string, listId: string, itemId: string, unpurchaseItemRequest: UnpurchaseItemRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Updates a list
     * @param {string} xAuthUser the email address of the user
     * @param {string} listId the ID of the list
     * @param {PickListNameOrGroupIdOrOrdinal} pickListNameOrGroupIdOrOrdinal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    updateList(xAuthUser: string, listId: string, pickListNameOrGroupIdOrOrdinal: PickListNameOrGroupIdOrOrdinal, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * LocationsApi - axios parameter creator
 * @export
 */
export declare const LocationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a new location
     * @param {string} xAuthUser the email address of the user
     * @param {Location} location the location to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLocation: (xAuthUser: string, location: Location, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves all locations within a radius of the current location
     * @param {string} xAuthUser the email address of the user
     * @param {LocationArea} locationArea
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNearbyLocations: (xAuthUser: string, locationArea: LocationArea, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing location name
     * @param {string} xAuthUser the email address of the user
     * @param {string} locationId the ID of the location to be updated
     * @param {PickLocationName} pickLocationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLocation: (xAuthUser: string, locationId: string, pickLocationName: PickLocationName, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LocationsApi - functional programming interface
 * @export
 */
export declare const LocationsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a new location
     * @param {string} xAuthUser the email address of the user
     * @param {Location} location the location to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLocation(xAuthUser: string, location: Location, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PickLocationId>>;
    /**
     *
     * @summary Retrieves all locations within a radius of the current location
     * @param {string} xAuthUser the email address of the user
     * @param {LocationArea} locationArea
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNearbyLocations(xAuthUser: string, locationArea: LocationArea, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NearbyLocation>>>;
    /**
     *
     * @summary Updates an existing location name
     * @param {string} xAuthUser the email address of the user
     * @param {string} locationId the ID of the location to be updated
     * @param {PickLocationName} pickLocationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLocation(xAuthUser: string, locationId: string, pickLocationName: PickLocationName, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * LocationsApi - factory interface
 * @export
 */
export declare const LocationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Creates a new location
     * @param {string} xAuthUser the email address of the user
     * @param {Location} location the location to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLocation(xAuthUser: string, location: Location, options?: RawAxiosRequestConfig): AxiosPromise<PickLocationId>;
    /**
     *
     * @summary Retrieves all locations within a radius of the current location
     * @param {string} xAuthUser the email address of the user
     * @param {LocationArea} locationArea
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNearbyLocations(xAuthUser: string, locationArea: LocationArea, options?: RawAxiosRequestConfig): AxiosPromise<Array<NearbyLocation>>;
    /**
     *
     * @summary Updates an existing location name
     * @param {string} xAuthUser the email address of the user
     * @param {string} locationId the ID of the location to be updated
     * @param {PickLocationName} pickLocationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLocation(xAuthUser: string, locationId: string, pickLocationName: PickLocationName, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
export declare class LocationsApi extends BaseAPI {
    /**
     *
     * @summary Creates a new location
     * @param {string} xAuthUser the email address of the user
     * @param {Location} location the location to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    createLocation(xAuthUser: string, location: Location, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickLocationId, any>>;
    /**
     *
     * @summary Retrieves all locations within a radius of the current location
     * @param {string} xAuthUser the email address of the user
     * @param {LocationArea} locationArea
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    getNearbyLocations(xAuthUser: string, locationArea: LocationArea, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<NearbyLocation[], any>>;
    /**
     *
     * @summary Updates an existing location name
     * @param {string} xAuthUser the email address of the user
     * @param {string} locationId the ID of the location to be updated
     * @param {PickLocationName} pickLocationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    updateLocation(xAuthUser: string, locationId: string, pickLocationName: PickLocationName, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * ShoppersApi - axios parameter creator
 * @export
 */
export declare const ShoppersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Accepts an invite to a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom the invite will be accepted
     * @param {string} inviteId the ID of the invite to be accepted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInvite: (xAuthUser: string, shopperId: string, inviteId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new shopper
     * @param {Shopper} shopper the shopper to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShopper: (shopper: Shopper, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Declines an invite to a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom the invite will be declined
     * @param {string} inviteId the ID of the invite to be declined
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineInvite: (xAuthUser: string, shopperId: string, inviteId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves all of the groups associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom groups will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups: (xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves all groups that a Shopper has been invited to
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom invites will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvites: (xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves all lists associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom lists will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLists: (xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves all locations associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom locations will be returned
     * @param {number} lookBackDays the number of days to look back for purchases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLocations: (xAuthUser: string, shopperId: string, lookBackDays: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves all previously purchased items associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom items will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPurchasedItems: (xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a shopper by ID
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId The ID of the shopper to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveShopper: (xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper to be updated
     * @param {Shopper} shopper the updated shopper properties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShopper: (xAuthUser: string, shopperId: string, shopper: Shopper, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ShoppersApi - functional programming interface
 * @export
 */
export declare const ShoppersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Accepts an invite to a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom the invite will be accepted
     * @param {string} inviteId the ID of the invite to be accepted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInvite(xAuthUser: string, shopperId: string, inviteId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Creates a new shopper
     * @param {Shopper} shopper the shopper to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShopper(shopper: Shopper, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shopper>>;
    /**
     *
     * @summary Declines an invite to a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom the invite will be declined
     * @param {string} inviteId the ID of the invite to be declined
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineInvite(xAuthUser: string, shopperId: string, inviteId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves all of the groups associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom groups will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups(xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PickGroupIdOrNameOrOwner>>>;
    /**
     *
     * @summary Retrieves all groups that a Shopper has been invited to
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom invites will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvites(xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>>>;
    /**
     *
     * @summary Retrieves all lists associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom lists will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLists(xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<List>>>;
    /**
     *
     * @summary Retrieves all locations associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom locations will be returned
     * @param {number} lookBackDays the number of days to look back for purchases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLocations(xAuthUser: string, shopperId: string, lookBackDays: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecentLocation>>>;
    /**
     *
     * @summary Retrieves all previously purchased items associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom items will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPurchasedItems(xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Item>>>;
    /**
     *
     * @summary Retrieves a shopper by ID
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId The ID of the shopper to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveShopper(xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shopper>>;
    /**
     *
     * @summary Updates an existing shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper to be updated
     * @param {Shopper} shopper the updated shopper properties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShopper(xAuthUser: string, shopperId: string, shopper: Shopper, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PickShopperId>>;
};
/**
 * ShoppersApi - factory interface
 * @export
 */
export declare const ShoppersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Accepts an invite to a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom the invite will be accepted
     * @param {string} inviteId the ID of the invite to be accepted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInvite(xAuthUser: string, shopperId: string, inviteId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Creates a new shopper
     * @param {Shopper} shopper the shopper to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShopper(shopper: Shopper, options?: RawAxiosRequestConfig): AxiosPromise<Shopper>;
    /**
     *
     * @summary Declines an invite to a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom the invite will be declined
     * @param {string} inviteId the ID of the invite to be declined
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineInvite(xAuthUser: string, shopperId: string, inviteId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves all of the groups associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom groups will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups(xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PickGroupIdOrNameOrOwner>>;
    /**
     *
     * @summary Retrieves all groups that a Shopper has been invited to
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom invites will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvites(xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Group>>;
    /**
     *
     * @summary Retrieves all lists associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom lists will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLists(xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<List>>;
    /**
     *
     * @summary Retrieves all locations associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom locations will be returned
     * @param {number} lookBackDays the number of days to look back for purchases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLocations(xAuthUser: string, shopperId: string, lookBackDays: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<RecentLocation>>;
    /**
     *
     * @summary Retrieves all previously purchased items associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom items will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPurchasedItems(xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Item>>;
    /**
     *
     * @summary Retrieves a shopper by ID
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId The ID of the shopper to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveShopper(xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig): AxiosPromise<Shopper>;
    /**
     *
     * @summary Updates an existing shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper to be updated
     * @param {Shopper} shopper the updated shopper properties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShopper(xAuthUser: string, shopperId: string, shopper: Shopper, options?: RawAxiosRequestConfig): AxiosPromise<PickShopperId>;
};
/**
 * ShoppersApi - object-oriented interface
 * @export
 * @class ShoppersApi
 * @extends {BaseAPI}
 */
export declare class ShoppersApi extends BaseAPI {
    /**
     *
     * @summary Accepts an invite to a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom the invite will be accepted
     * @param {string} inviteId the ID of the invite to be accepted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    acceptInvite(xAuthUser: string, shopperId: string, inviteId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Creates a new shopper
     * @param {Shopper} shopper the shopper to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    createShopper(shopper: Shopper, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Shopper, any>>;
    /**
     *
     * @summary Declines an invite to a group
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom the invite will be declined
     * @param {string} inviteId the ID of the invite to be declined
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    declineInvite(xAuthUser: string, shopperId: string, inviteId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves all of the groups associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom groups will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    getGroups(xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickGroupIdOrNameOrOwner[], any>>;
    /**
     *
     * @summary Retrieves all groups that a Shopper has been invited to
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom invites will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    getInvites(xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Group[], any>>;
    /**
     *
     * @summary Retrieves all lists associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom lists will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    getLists(xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<List[], any>>;
    /**
     *
     * @summary Retrieves all locations associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom locations will be returned
     * @param {number} lookBackDays the number of days to look back for purchases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    getLocations(xAuthUser: string, shopperId: string, lookBackDays: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RecentLocation[], any>>;
    /**
     *
     * @summary Retrieves all previously purchased items associated with a Shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper for whom items will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    getPurchasedItems(xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Item[], any>>;
    /**
     *
     * @summary Retrieves a shopper by ID
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId The ID of the shopper to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    retrieveShopper(xAuthUser: string, shopperId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Shopper, any>>;
    /**
     *
     * @summary Updates an existing shopper
     * @param {string} xAuthUser the email address of the user
     * @param {string} shopperId the ID of the shopper to be updated
     * @param {Shopper} shopper the updated shopper properties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppersApi
     */
    updateShopper(xAuthUser: string, shopperId: string, shopper: Shopper, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickShopperId, any>>;
}
